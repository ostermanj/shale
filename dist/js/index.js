!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.createResultItem=function(e){var t,n;if(void 0===e.data.creators)t="";else if(t=(n=e.data.creators.map(function(e){return e.firstName+" "+e.lastName})).join(","),2===n.length)t=t.replace(","," and ");else if(n.length>4)t=n[0]+" et al.";else{var o=(t=t.replace(/,/g,", ")).lastIndexOf(",");-1!==o&&(t=t.substr(0,o+1)+" and"+t.substr(o+1))}var r=e.data.publisher||e.data.journalAbbreviation||e.data.publicationTitle||e.data.institution||e.data.websiteTitle||"",a="",i="";if(e.data.collections&&e.data.collections.length>0&&(i="<b>Topic:</b> ",e.data.collections.length>1&&(i="<b>Topics: </b>"),e.data.collections.forEach(function(e,t){var n=RFFApp.model.collections.find(function(t){return t.key===e}).data.name;i+=t>0?", "+n:n}),a+=i+"<br />"),e.data.url&&""!==e.data.url){var s=document.createElement("a");s.setAttribute("href",e.data.url),s.setAttribute("target","_blank"),s.setAttribute("class","details-link"),s.innerHTML="Go to link",a+=s.outerHTML+"<br />"}if(e.data.DOI&&""!==e.data.DOI&&(a+="DOI: "+e.data.DOI+"<br />"),e.bib&&""!==e.bib){var l=document.createElement("div");l.innerHTML=e.bib;var c=l.querySelector(".csl-entry").innerHTML,u=document.createElement("textarea");u.innerHTML=c,u.setAttribute("class","bib-container");var d=document.createElement("a");d.setAttribute("href","#"),d.setAttribute("class","details-link copy-bib"),d.innerHTML="Copy biblio. info",a+=u.outerHTML+d.outerHTML}return'\n              <div class="detail-results-wrapper">\n                  <div class="detail-results">'+(a=""!==a?a:"< nothing to show >")+'</div>\n              </div>\n              <div class="summary-results">\n                  <div class="flex space-between">\n                      <span class="flex item-info items-center">\n                          <span class="list-item__label">'+(e.synthesisType||e.data.itemType.undoCamelCase())+'</span>\n                          <span class="list-item__meta publisher-name">'+r.trunc(90,!0)+'</span>\n                      </span>\n                      <span class="list-item__meta">'+e.data.dateString+'</span>\n                  </div>\n                  <h3 class="list-item__title"><a class="item-title-link" href="#">'+e.data.title+'</a></h3>\n                  <span class="list-item__meta">'+t+"</span>\n              </div>\n              "}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.createBrowseButton=function(e,t){var n;e.children&&(n=e.children.reduce(function(e,t){return e+t.data.name.cleanString()+" "},""));var o=document.createElement("div");o.innerHTML='\n  <div class="button button--secondary '+n+" "+(0===t?"active":"")+'">\n    <span>'+e.data.name+"</span>\n  </div>";var r=o.children[0];return r.onclick=function(){console.log(this),d3.selectAll("#browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),RFFApp.controller.getCollectionItems(e.data.key)},r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ /]/g,"-").replace(/['"”’“‘,.!?;()&]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},void(String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."}))},,function(e,t,n){},function(e,t,n){"use strict";n(4),n(2);var o,r,a,i,s=n(1),l=n(0);function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}o="2127948",r={gateCheck:0,init:function(e){this.getZoteroCollections(e),this.getZoteroItems(e)},childrenify:function(e){return console.log(e),e.forEach(function(t){if(!1!==t.data.parentCollection&&t.meta.numItems>0){var n=e.find(function(e){return e.key===t.data.parentCollection});void 0!==n&&(n.children=n.children||[],n.children.push(t))}}),e},getZoteroCollections:function(e){var t=this;e?d3.json("data/zoteroCollections-4-11-18.json",function(e,n){if(e)throw e;a.collections=t.childrenify(n),console.log("increment gateCheck from get collections"),t.gateCheck++,i.init()}):new Promise(function(e,n){d3.json("https://api.zotero.org/groups/"+o+"/collections?limit=100",function(o,r){if(o)throw n(o),o;console.log(JSON.stringify(r)),a.collections=t.childrenify(r),e(a.collections)})}).then(function(e){console.log(e),console.log("increment gateCheck from get collections"),t.gateCheck++,i.init()})},getZoteroItems:function(e){var t=this;if(e)d3.json("data/zoteroItems-4-11-18.json",function(e,n){if(e)throw e;a.zoteroItems=n,t.parseZoteroItemDates(),console.log("increment gateCheck from get items"),t.gateCheck++,i.init()});else{for(var n=[],r=[],s=0;s<9;s++)n.push(l(s));Promise.race(n).then(function(e){if(console.log(e),e.total>9){for(var o=9;o<Math.ceil(e.total/100);o++)r.push(l(o));Promise.all([].concat(n,r)).then(function(e){window.dateStrings=[],console.log(e),e.forEach(function(e){var t;(t=a.zoteroItems).push.apply(t,c(e.data))}),console.log(JSON.stringify(a.zoteroItems)),t.parseZoteroItemDates(),t.gateCheck++,i.init()})}else Promise.all(n).then(function(e){console.log(e),e.forEach(function(e){var t;(t=a.zoteroItems).push.apply(t,c(e.data))}),t.parseZoteroItemDates(),t.gateCeck++,i.init()})})}function l(e){return new Promise(function(t,n){d3.request("https://api.zotero.org/groups/"+o+"/items/top?include=data,bib&limit=100&start="+100*e,function(e,o){if(e)throw n(e),e;t({total:+o.getResponseHeader("Total-Results"),data:JSON.parse(o.responseText)})})})}},parseZoteroItemDates:function(){var e=this;a.zoteroItems.forEach(function(t){var n=e.getDatesFromString(t.data.date);t.data.dateString=n.display,t.data.dateValue=n.value}),a.zoteroItems.sort(function(e,t){return d3.descending(e.data.dateValue,t.data.dateValue)})},getCollectionItems:function(e){console.log(e);var t=a.collections.find(function(t){return t.key===e});console.log(t);var n=a.zoteroItems.filter(function(t){return-1!==t.data.collections.indexOf(e)});console.log(n);var o=[];t.children&&t.children.forEach(function(e){var t=a.zoteroItems.filter(function(t){return-1!==t.data.collections.indexOf(e.key)});t.forEach(function(t){t.synthesisType=e.data.name}),o.push.apply(o,c(t))}),i.filterResults(n),i.filterSynthesisResults(o)},getDatesFromString:function(e){var t=new Date(1776,3,4),n="",o={forthcoming:/forthcoming/,yyyy:/^(\d{4})$/,yyyymmdd:/(\d{4})[-/](\d{1,2})[-/](\d{1,2})/,monthddyyyy:/^(\w+)\.* *(\d{1,2}), *(\d{4})/,monthyyyy:/^(\w+)\.* (\d{4})/,yyyymm:/^(\d{4})[-/](\d{1,2})$/,mmddyyyy:/^(\d{1,2})[-/](\d{1,2})[-/](\d{4})/,yyyyyyyy:/^(\d{4})[-–—]\d{4}/,yyyymonthdd:/^(\d{4}) *(\w+)\.* *(\d{1,2})/};function r(e){return void 0!==a[e]&&isNaN(a[e])?a[e]:e}var a={0:"January",1:"February",2:"March",3:"April",4:"May",5:"June",6:"July",7:"August",8:"September",9:"October",10:"November",11:"December",January:0,February:1,March:2,April:3,May:4,June:5,July:6,August:7,September:8,October:9,November:10,December:11,Winter:11,Spring:2,Summer:5,Fall:8,Autumn:8,Jan:"January",Feb:"February",Mar:"March",Apr:"April",Jun:"June",Jul:"July",Aug:"August",Sep:"September",Sept:"September",Oct:"October",Nov:"Novemeber",Dec:"December"};for(var i in o)if(o.hasOwnProperty(i)&&void 0!==e){var s=e.match(o[i]);if(null!==s)switch(i){case"yyyy":n=e,t=new Date(+s[1],0,1);break;case"yyyymmdd":n=a[(+s[2]-1).toString()]+" "+ +s[3]+", "+s[1],t=new Date(+s[1],+s[2]-1,+s[3]);break;case"monthddyyyy":n=r(s[1])+" "+ +s[2]+", "+s[3],t=new Date(+s[3],a[r(s[1])],+s[2]);break;case"monthyyyy":n=r(s[1])+" "+s[2],t=new Date(+s[2],a[r(s[1])],1);break;case"yyyymm":n=a[+s[2]-1]+" "+s[1],t=new Date(+s[1],+s[2]-1,1);break;case"mmddyyyy":n=a[+s[1]-1]+" "+ +s[2]+", "+s[3],t=new Date(+s[3],+s[1]-1,+s[2]);break;case"yyyyyyyy":n=e.replace("-","—").replace("-","–"),t=new Date(+s[1],0,1);break;case"yyyymonthdd":n=r(s[2])+" "+ +s[3]+", "+s[1],t=new Date(+s[1],a[r(s[2])],+s[3]);break;case"forthcoming":n="forthcoming",t=new Date}}return{value:t,display:n}},copyBibText:function(){this.parentNode.querySelector(".bib-container").select();try{var e=document.execCommand("copy"),t=e?"successful":"unsuccessful";console.log("Copying text command was "+t),e&&alert("Bibliographical entry copied to clipboard")}catch(e){console.log("Oops, unable to copy")}}},a={zoteroItems:[]},i={init:function(){console.log(r.gateCheck),r.gateCheck<2||(console.log("READY!"),console.log(a.zoteroItems),this.renderTopicButtons(),this.results=d3.select("#results ul").classed("load",!1),console.log(a.collections),r.getCollectionItems(a.collections.find(function(e){return!1===e.data.parentCollection}).key))},renderTopicButtons:function(){var e=document.getElementById("browse-buttons"),t=0;a.collections.sort(function(e,t){return d3.ascending(e.data.name,t.data.name)}),a.collections.forEach(function(n){!1===n.data.parentCollection&&(e.appendChild((0,s.createBrowseButton)(n,t)),t++)}),this.renderShowAllButton()},renderShowAllButton:function(){d3.select("#browse-buttons").append("div").classed("button button--tertiary show-all",!0).on("click",function(){d3.selectAll("#browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),i.filterResults.call(i),i.filterSynthesisResults.call(i,[])}).append("span").text("Show all")},filterResults:function(e){var t=this;console.log(e),console.log("filterResults",this);var n=void 0===e?a.zoteroItems:e,o=this.results.selectAll(".list-item").data(n,function(e){return e.data.key});o.exit().classed("entered",!1).classed("exiting",!0).transition(1500).remove();var i=o.enter().append("li").attr("class",function(e,t){return e.key+" "+e.data.itemType+" index-"+t+("RFF"===e.data.institution||"Resources for the Future"===e.data.institution?" RFF":"")}).classed("entering",!0).classed("list-item",!0).html(function(e){return(0,l.createResultItem)(e)}).on("click",function(e,n,o){d3.event.target.classList.contains("details-link")||t.showDetails(o[n])});setTimeout(function(){i.classed("entering",!1)}),this.items=i.merge(o),d3.selectAll(".item-title-link").on("click",function(){d3.event.preventDefault()}),d3.selectAll(".copy-bib").on("click",function(){d3.event.preventDefault(),r.copyBibText.call(this)})},showDetails:function(e){var t=d3.select(e);t.classed("show-details",!t.classed("show-details"))},filterSynthesisResults:function(e){console.log(e);var t=d3.select("#synthesis-results ul").selectAll(".list-item").data(e,function(e){return e.data.key});console.log(t),t.exit().classed("entered",!1).classed("exiting",!0).transition(1500).remove();var n=t.enter().append("li").attr("id",function(e){return e.key}).attr("class",function(e,t){return(e.synthesisType.cleanString()||e.data.itemType)+" index-"+t+("RFF"===e.data.institution||"Resources for the Future"===e.data.institution?" RFF":"")}).classed("RFF",!0).classed("entering",!0).classed("list-item",!0).html(function(e){return(0,l.createResultItem)(e)}).on("click",function(){window.open("./pdf/"+this.id+".pdf","_blank")});setTimeout(function(){n.classed("entering",!1)}),this.synthesisItems=n.merge(t),d3.selectAll(".item-title-link").on("click",function(){d3.event.preventDefault()})}},window.RFFApp={controller:r,model:a},r.init(!0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,