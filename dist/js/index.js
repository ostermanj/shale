!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=13)}([function(t,e,n){!function(){"use strict";t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style&&!0!==t.__forceSmoothScrollPolyfill__)){var n,o=t.HTMLElement||t.Element,r=468,i={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:o.prototype.scroll||l,scrollIntoView:o.prototype.scrollIntoView},a=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,s=(n=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(n)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?m.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):i.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(p(arguments[0])?i.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==p(arguments[0])){var t=arguments[0].left,e=arguments[0].top;m.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==p(arguments[0])){var n=function(t){var n;do{n=(t=t.parentNode)===e.body}while(!1===n&&!1===u(t));return n=null,t}(this),o=n.getBoundingClientRect(),r=this.getBoundingClientRect();n!==e.body?(m.call(this,n,n.scrollLeft+r.left-o.left,n.scrollTop+r.top-o.top),"fixed"!==t.getComputedStyle(n).position&&t.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):t.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function p(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(t,e){return"Y"===e?t.clientHeight+s<t.scrollHeight:"X"===e?t.clientWidth+s<t.scrollWidth:void 0}function d(e,n){var o=t.getComputedStyle(e,null)["overflow"+n];return"auto"===o||"scroll"===o}function u(t){var e=c(t,"Y")&&d(t,"Y"),n=c(t,"X")&&d(t,"X");return e||n}function f(e){var n,o,i,s,l=(a()-e.startTime)/r;s=l=l>1?1:l,n=.5*(1-Math.cos(Math.PI*s)),o=e.startX+(e.x-e.startX)*n,i=e.startY+(e.y-e.startY)*n,e.method.call(e.scrollable,o,i),o===e.x&&i===e.y||t.requestAnimationFrame(f.bind(t,e))}function m(n,o,r){var s,p,c,d,u=a();n===e.body?(s=t,p=t.scrollX||t.pageXOffset,c=t.scrollY||t.pageYOffset,d=i.scroll):(s=n,p=n.scrollLeft,c=n.scrollTop,d=l),f({scrollable:s,method:d,startTime:u,startX:p,startY:c,x:o,y:r})}}}}()},,function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.filterResults=e.createResultItem=e.createResultsContainer=void 0;var o,r=n(2),i=(o=r)&&o.__esModule?o:{default:o};console.log(i.default);e.createResultsContainer=function(){document.getElementById("results-container").innerHTML='<div class="synthesis-results">\n                  <ul class="flex space-between"></ul>\n              </div>\n              <div class="results">\n                  <ul class="loadable"></ul>\n              </div> ',this.results=document.querySelector("div.results ul")};var a=e.createResultItem=function(t){var e,n;if(void 0===t.data.creators)e="";else if(e=(n=t.data.creators.map(function(t){return t.firstName+" "+t.lastName})).join(","),2===n.length)e=e.replace(","," and ");else if(n.length>4)e=n[0]+" et al.";else{var o=(e=e.replace(/,/g,", ")).lastIndexOf(",");-1!==o&&(e=e.substr(0,o+1)+" and"+e.substr(o+1))}var r,i,a=t.data.publisher||t.data.journalAbbreviation||t.data.publicationTitle||t.data.institution||t.data.websiteTitle||"",s=document.createElement("div");if(s.className="links-div tippy-clipboard",s.setAttribute("title","Copied to clipboard"),t.data.url&&""!==t.data.url){var l=document.createElement("a");r=t.data.url,l.setAttribute("href",r),l.setAttribute("target","_blank"),l.setAttribute("class","details-link"),l.innerHTML="Go to link",s.appendChild(l)}if(t.bib&&""!==t.bib){var p=document.createElement("div");p.innerHTML=t.bib;var c=p.querySelector(".csl-entry").innerHTML,d=document.createElement("textarea");d.innerHTML=c,d.setAttribute("class","bib-container");var u=document.createElement("a");u.setAttribute("href","#"),u.setAttribute("class","copy-bib"),u.setAttribute("title",c),u.innerHTML="Copy biblio. info",s.appendChild(d),s.appendChild(u)}return i=void 0!==r?'<a class="item-title-link" target="_blank" href="'+r+'">'+t.data.title+"</a>":""+t.data.title,'\n              \n              <div class="summary-results">\n                  <div class="flex space-between">\n                      <span class="flex item-info items-center">\n                          <span class="list-item__label">'+(t.synthesisType||t.data.itemType.undoCamelCase())+'</span>\n                          <span class="list-item__meta publisher-name">'+a.trunc(90,!0)+'</span>\n                      </span>\n                      <span class="list-item__meta">'+t.data.dateString+'</span>\n                  </div>\n                  <h3 class="list-item__title">'+i+'</h3>\n                  <span class="list-item__meta">'+e+"</span>\n                  "+s.outerHTML+"\n              </div>\n              "};e.filterResults=function(t,e,n){console.log("list-item",t);var o=void 0===t?window.RFFApp.model.zoteroItems:"none"===t?[]:t;console.log(o);var r=d3.select(this.results).selectAll(".list-item").data(o,function(t){return t.key});r.exit().classed("entered",!1).classed("exiting",!0).transition(1500).remove();var i=r.enter().append("li").attr("class",function(t,e){return t.key+" "+t.data.itemType+" index-"+e+("RFF"===t.data.institution||"Resources for the Future"===t.data.institution?" RFF":"")}).classed("entering",!0).classed("list-item",!0).html(function(t){return a(t)});setTimeout(function(){i.classed("entering",!1)}),this.items=i.merge(r),d3.selectAll(".copy-bib").on("click",function(){d3.event.preventDefault(),e.copyBibText.call(this)}),e.biblioTooltips(),"initial"!==n&&this.smoothScroll(document.querySelector(".synthesis-results"))}},,function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createTopicKey=e.createBrowseCategory=void 0;var o,r=n(5),i=(o=r)&&o.__esModule?o:{default:o};console.log(i.default);e.createBrowseCategory=function(t,e,n){var o,r=document.createElement("div");if(console.log(e,n),0===e&&n){var a=document.createElement("h2");a.id="browse-heading",a.innerHTML="Browse by topic",r.appendChild(a)}return n?(r.insertAdjacentHTML("beforeend","<h3>"+t.data.name+"</h3>"),(o=document.createElement("div")).className="browse-buttons",t.children.sort(function(t,e){return d3.ascending(t.data.name,e.data.name)}).forEach(function(t,e){o.appendChild(s(t))})):((o=document.querySelector(".browse-buttons.uncategorized")||document.createElement("div")).className="browse-buttons uncategorized",0!==t.data.name.indexOf("_")&&o.appendChild(s(t))),console.log(t),r.appendChild(o),console.log(r),r;function s(t){var e=[];t.children&&(e=t.children.map(function(t){return t.data.name.cleanString()})),console.log(i.default,e);var o=document.createElement("div");o.innerHTML='\n    <div title="not loaded" data-collection="'+t.key+'" class="button button--'+(n?"secondary":"tertiary")+" "+e.reduce(function(t,e){return t+e+" "},"")+'">\n      <span>'+t.data.name+"</span>\n    </div>";var r=o.children[0];return r.onclick=function(){console.log(this),d3.selectAll(".browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),RFFApp.controller.getCollectionItems(t.data.key),RFFApp.controller.clearSearch()},r}},e.createTopicKey=function(){var t=document.getElementById("browse-heading"),e='<div id="topic-key">\n                  <div class="'+i.default.keyMark+'">= issue brief and/or literature review available</div>\n              </div>';t.insertAdjacentHTML("afterend",e)}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){(function(e){
/*!
* Tippy.js v2.5.2
* (c) 2017-2018 atomiks
* MIT
*/var n;n=function(){"use strict";var t="undefined"!=typeof window,n=t&&/MSIE |Trident\//.test(navigator.userAgent),o={};t&&(o.supported="requestAnimationFrame"in window,o.supportsTouch="ontouchstart"in window,o.usingTouch=!1,o.dynamicInputDetection=!0,o.iOS=/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,o.onUserInputChange=function(){});var r={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow",REFERENCE:"[data-tippy]"},i={placement:"top",livePlacement:!0,trigger:"mouseenter focus",animation:"shift-away",html:!1,animateFill:!0,arrow:!1,delay:0,duration:[350,300],interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,updateDuration:350,sticky:!1,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,flip:!0,flipBehavior:"flip",arrowType:"sharp",arrowTransform:"",maxWidth:"",target:null,allowTitleHTML:!0,popperOptions:{},createPopperInstanceOnInit:!1,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){}},a=o.supported&&Object.keys(i);function s(t){return"[object Object]"==={}.toString.call(t)}function l(t){return[].slice.call(t)}function p(t){for(var e=["","webkit"],n=t.charAt(0).toUpperCase()+t.slice(1),o=0;o<e.length;o++){var r=e[o],i=r?r+n:t;if(void 0!==document.body.style[i])return i}return null}function c(){return document.createElement("div")}var d=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),f=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t};function m(t){var e=function(e){return t.querySelector(e)};return{tooltip:e(r.TOOLTIP),backdrop:e(r.BACKDROP),content:e(r.CONTENT),arrow:e(r.ARROW)||e(r.ROUND_ARROW)}}function h(t){var e=t.getAttribute("title");e&&t.setAttribute("data-original-title",e),t.removeAttribute("title")}
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */for(var y="undefined"!=typeof window&&"undefined"!=typeof document,v=["Edge","Trident","Firefox"],b=0,g=0;g<v.length;g+=1)if(y&&navigator.userAgent.indexOf(v[g])>=0){b=1;break}var w=y&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},b))}};function x(t){return t&&"[object Function]"==={}.toString.call(t)}function k(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function E(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function T(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=k(t),n=e.overflow,o=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+o)?t:T(E(t))}var S=y&&!(!window.MSInputMethodContext||!document.documentMode),A=y&&/MSIE 10/.test(navigator.userAgent);function C(t){return 11===t?S:10===t?A:S||A}function O(t){if(!t)return document.documentElement;for(var e=C(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var o=n&&n.nodeName;return o&&"BODY"!==o&&"HTML"!==o?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===k(n,"position")?O(n):n:t?t.ownerDocument.documentElement:document.documentElement}function L(t){return null!==t.parentNode?L(t.parentNode):t}function I(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,o=n?t:e,r=n?e:t,i=document.createRange();i.setStart(o,0),i.setEnd(r,0);var a,s,l=i.commonAncestorContainer;if(t!==l&&e!==l||o.contains(r))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&O(a.firstElementChild)!==a?O(l):l;var p=L(t);return p.host?I(p.host,e):I(t,L(e).host)}function M(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var o=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||o)[e]}return t[e]}function F(t,e){var n="x"===e?"Left":"Top",o="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+o+"Width"],10)}function P(t,e,n,o){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],C(10)?n["offset"+t]+o["margin"+("Height"===t?"Top":"Left")]+o["margin"+("Height"===t?"Bottom":"Right")]:0)}function R(){var t=document.body,e=document.documentElement,n=C(10)&&getComputedStyle(e);return{height:P("Height",t,e,n),width:P("Width",t,e,n)}}var D=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Y=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),X=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},N=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t};function _(t){return N({},t,{right:t.left+t.width,bottom:t.top+t.height})}function H(t){var e={};try{if(C(10)){e=t.getBoundingClientRect();var n=M(t,"top"),o=M(t,"left");e.top+=n,e.left+=o,e.bottom+=n,e.right+=o}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},i="HTML"===t.nodeName?R():{},a=i.width||t.clientWidth||r.right-r.left,s=i.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-a,p=t.offsetHeight-s;if(l||p){var c=k(t);l-=F(c,"x"),p-=F(c,"y"),r.width-=l,r.height-=p}return _(r)}function B(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=C(10),r="HTML"===e.nodeName,i=H(t),a=H(e),s=T(t),l=k(e),p=parseFloat(l.borderTopWidth,10),c=parseFloat(l.borderLeftWidth,10);n&&"HTML"===e.nodeName&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var d=_({top:i.top-a.top-p,left:i.left-a.left-c,width:i.width,height:i.height});if(d.marginTop=0,d.marginLeft=0,!o&&r){var u=parseFloat(l.marginTop,10),f=parseFloat(l.marginLeft,10);d.top-=p-u,d.bottom-=p-u,d.left-=c-f,d.right-=c-f,d.marginTop=u,d.marginLeft=f}return(o&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=M(e,"top"),r=M(e,"left"),i=n?-1:1;return t.top+=o*i,t.bottom+=o*i,t.left+=r*i,t.right+=r*i,t}(d,e)),d}function z(t){if(!t||!t.parentElement||C())return document.documentElement;for(var e=t.parentElement;e&&"none"===k(e,"transform");)e=e.parentElement;return e||document.documentElement}function j(t,e,n,o){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=r?z(t):I(t,e);if("viewport"===o)i=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,o=B(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:M(n),s=e?0:M(n,"left");return _({top:a-o.top+o.marginTop,left:s-o.left+o.marginLeft,width:r,height:i})}(a,r);else{var s=void 0;"scrollParent"===o?"BODY"===(s=T(E(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===o?t.ownerDocument.documentElement:o;var l=B(s,a,r);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===k(e,"position")||t(E(e)))}(a))i=l;else{var p=R(),c=p.height,d=p.width;i.top+=l.top-l.marginTop,i.bottom=c+l.top,i.left+=l.left-l.marginLeft,i.right=d+l.left}}return i.left+=n,i.top+=n,i.right-=n,i.bottom-=n,i}function W(t,e,n,o,r){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=j(n,o,i,r),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},l=Object.keys(s).map(function(t){return N({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),p=l.filter(function(t){var e=t.width,o=t.height;return e>=n.clientWidth&&o>=n.clientHeight}),c=p.length>0?p[0].key:l[0].key,d=t.split("-")[1];return c+(d?"-"+d:"")}function q(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return B(n,o?z(e):I(e,n),o)}function U(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),o=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+o,height:t.offsetHeight+n}}function J(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function V(t,e,n){n=n.split("-")[0];var o=U(t),r={width:o.width,height:o.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",s=i?"left":"top",l=i?"height":"width",p=i?"width":"height";return r[a]=e[a]+e[l]/2-o[l]/2,r[s]=n===s?e[s]-o[p]:e[J(s)],r}function G(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function K(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var o=G(t,function(t){return t[e]===n});return t.indexOf(o)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&x(n)&&(e.offsets.popper=_(e.offsets.popper),e.offsets.reference=_(e.offsets.reference),e=n(e,t))}),e}function Z(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function Q(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),o=0;o<e.length;o++){var r=e[o],i=r?""+r+n:t;if(void 0!==document.body.style[i])return i}return null}function $(t){var e=t.ownerDocument;return e?e.defaultView:window}function tt(t,e,n,o){n.updateBound=o,$(t).addEventListener("resize",n.updateBound,{passive:!0});var r=T(t);return function t(e,n,o,r){var i="BODY"===e.nodeName,a=i?e.ownerDocument.defaultView:e;a.addEventListener(n,o,{passive:!0}),i||t(T(a.parentNode),n,o,r),r.push(a)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function et(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,$(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function nt(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function ot(t,e){Object.keys(e).forEach(function(n){var o="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&nt(e[n])&&(o="px"),t.style[n]=e[n]+o})}function rt(t,e,n){var o=G(t,function(t){return t.name===e}),r=!!o&&t.some(function(t){return t.name===n&&t.enabled&&t.order<o.order});if(!r){var i="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return r}var it=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],at=it.slice(3);function st(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=at.indexOf(t),o=at.slice(n+1).concat(at.slice(0,n));return e?o.reverse():o}var lt={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function pt(t,e,n,o){var r=[0,0],i=-1!==["right","left"].indexOf(o),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(G(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,p=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(p=p.map(function(t,o){var r=(1===o?!i:i)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,o){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+r[1],a=r[2];if(!i)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=o}return _(s)[e]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(t,r,e,n)})})).forEach(function(t,e){t.forEach(function(n,o){nt(n)&&(r[e]+=n*("-"===t[o-1]?-1:1))})}),r}var ct={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],o=e.split("-")[1];if(o){var r=t.offsets,i=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",p=s?"width":"height",c={start:X({},l,i[l]),end:X({},l,i[l]+i[p]-a[p])};t.offsets.popper=N({},a,c[o])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,o=t.placement,r=t.offsets,i=r.popper,a=r.reference,s=o.split("-")[0],l=void 0;return l=nt(+n)?[+n,0]:pt(n,i,a,s),"left"===s?(i.top+=l[0],i.left-=l[1]):"right"===s?(i.top+=l[0],i.left+=l[1]):"top"===s?(i.left+=l[0],i.top-=l[1]):"bottom"===s&&(i.left+=l[0],i.top+=l[1]),t.popper=i,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||O(t.instance.popper);t.instance.reference===n&&(n=O(n));var o=Q("transform"),r=t.instance.popper.style,i=r.top,a=r.left,s=r[o];r.top="",r.left="",r[o]="";var l=j(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);r.top=i,r.left=a,r[o]=s,e.boundaries=l;var p=e.priority,c=t.offsets.popper,d={primary:function(t){var n=c[t];return c[t]<l[t]&&!e.escapeWithReference&&(n=Math.max(c[t],l[t])),X({},t,n)},secondary:function(t){var n="right"===t?"left":"top",o=c[n];return c[t]>l[t]&&!e.escapeWithReference&&(o=Math.min(c[n],l[t]-("right"===t?c.width:c.height))),X({},n,o)}};return p.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=N({},c,d[e](t))}),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,o=e.reference,r=t.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",l=a?"left":"top",p=a?"width":"height";return n[s]<i(o[l])&&(t.offsets.popper[l]=i(o[l])-n[p]),n[l]>i(o[s])&&(t.offsets.popper[l]=i(o[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!rt(t.instance.modifiers,"arrow","keepTogether"))return t;var o=e.element;if("string"==typeof o){if(!(o=t.instance.popper.querySelector(o)))return t}else if(!t.instance.popper.contains(o))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],i=t.offsets,a=i.popper,s=i.reference,l=-1!==["left","right"].indexOf(r),p=l?"height":"width",c=l?"Top":"Left",d=c.toLowerCase(),u=l?"left":"top",f=l?"bottom":"right",m=U(o)[p];s[f]-m<a[d]&&(t.offsets.popper[d]-=a[d]-(s[f]-m)),s[d]+m>a[f]&&(t.offsets.popper[d]+=s[d]+m-a[f]),t.offsets.popper=_(t.offsets.popper);var h=s[d]+s[p]/2-m/2,y=k(t.instance.popper),v=parseFloat(y["margin"+c],10),b=parseFloat(y["border"+c+"Width"],10),g=h-t.offsets.popper[d]-v-b;return g=Math.max(Math.min(a[p]-m,g),0),t.arrowElement=o,t.offsets.arrow=(X(n={},d,Math.round(g)),X(n,u,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(Z(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=j(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),o=t.placement.split("-")[0],r=J(o),i=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case lt.FLIP:a=[o,r];break;case lt.CLOCKWISE:a=st(o);break;case lt.COUNTERCLOCKWISE:a=st(o,!0);break;default:a=e.behavior}return a.forEach(function(s,l){if(o!==s||a.length===l+1)return t;o=t.placement.split("-")[0],r=J(o);var p=t.offsets.popper,c=t.offsets.reference,d=Math.floor,u="left"===o&&d(p.right)>d(c.left)||"right"===o&&d(p.left)<d(c.right)||"top"===o&&d(p.bottom)>d(c.top)||"bottom"===o&&d(p.top)<d(c.bottom),f=d(p.left)<d(n.left),m=d(p.right)>d(n.right),h=d(p.top)<d(n.top),y=d(p.bottom)>d(n.bottom),v="left"===o&&f||"right"===o&&m||"top"===o&&h||"bottom"===o&&y,b=-1!==["top","bottom"].indexOf(o),g=!!e.flipVariations&&(b&&"start"===i&&f||b&&"end"===i&&m||!b&&"start"===i&&h||!b&&"end"===i&&y);(u||v||g)&&(t.flipped=!0,(u||v)&&(o=a[l+1]),g&&(i=function(t){return"end"===t?"start":"start"===t?"end":t}(i)),t.placement=o+(i?"-"+i:""),t.offsets.popper=N({},t.offsets.popper,V(t.instance.popper,t.offsets.reference,t.placement)),t=K(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],o=t.offsets,r=o.popper,i=o.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=i[n]-(s?r[a?"width":"height"]:0),t.placement=J(e),t.offsets.popper=_(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!rt(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=G(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,o=e.y,r=t.offsets.popper,i=G(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:e.gpuAcceleration,s=H(O(t.instance.popper)),l={position:r.position},p={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},c="bottom"===n?"top":"bottom",d="right"===o?"left":"right",u=Q("transform"),f=void 0,m=void 0;if(m="bottom"===c?-s.height+p.bottom:p.top,f="right"===d?-s.width+p.right:p.left,a&&u)l[u]="translate3d("+f+"px, "+m+"px, 0)",l[c]=0,l[d]=0,l.willChange="transform";else{var h="bottom"===c?-1:1,y="right"===d?-1:1;l[c]=m*h,l[d]=f*y,l.willChange=c+", "+d}var v={"x-placement":t.placement};return t.attributes=N({},v,t.attributes),t.styles=N({},l,t.styles),t.arrowStyles=N({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return ot(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&ot(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,o,r){var i=q(r,e,t,n.positionFixed),a=W(n.placement,i,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),ot(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},dt=function(){function t(e,n){var o=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};D(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(o.update)},this.update=w(this.update.bind(this)),this.options=N({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(N({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){o.options.modifiers[e]=N({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return N({name:t},o.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&x(t.onLoad)&&t.onLoad(o.reference,o.popper,o.options,t,o.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return Y(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=q(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=W(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=V(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=K(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,Z(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Q("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=tt(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return et.call(this)}}]),t}();function ut(t){return t.getAttribute("x-placement").replace(/-.+/,"")}function ft(t,e,n,o){return e.length?{scale:1===e.length?""+e[0]:n?e[0]+", "+e[1]:e[1]+", "+e[0],translate:1===e.length?o?-e[0]+"px":e[0]+"px":n?o?e[0]+"px, "+-e[1]+"px":e[0]+"px, "+e[1]+"px":o?-e[1]+"px, "+e[0]+"px":e[1]+"px, "+e[0]+"px"}[t]:""}function mt(t,e){if(!t)return"";return e?t:{X:"Y",Y:"X"}[t]}function ht(t,e,n){var o=ut(t),r="top"===o||"bottom"===o,i="right"===o||"bottom"===o,a=function(t){var e=n.match(t);return e?e[1]:""},s=function(t){var e=n.match(t);return e?e[1].split(",").map(parseFloat):[]},l=/translateX?Y?\(([^)]+)\)/,c=/scaleX?Y?\(([^)]+)\)/,d={translate:{axis:a(/translate([XY])/),numbers:s(l)},scale:{axis:a(/scale([XY])/),numbers:s(c)}},u=n.replace(l,"translate"+mt(d.translate.axis,r)+"("+ft("translate",d.translate.numbers,r,i)+")").replace(c,"scale"+mt(d.scale.axis,r)+"("+ft("scale",d.scale.numbers,r,i)+")");e.style[p("transform")]=u}function yt(t){return-(t-i.distance)+"px"}dt.Utils=("undefined"!=typeof window?window:e).PopperUtils,dt.placements=it,dt.Defaults=ct;var vt={};if(t){var bt=Element.prototype;vt=bt.matches||bt.matchesSelector||bt.webkitMatchesSelector||bt.mozMatchesSelector||bt.msMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),n=e.length;--n>=0&&e.item(n)!==this;);return n>-1}}var gt=vt;function wt(t,e){return(Element.prototype.closest||function(t){for(var e=this;e;){if(gt.call(e,t))return e;e=e.parentElement}}).call(t,e)}function xt(t,e){return Array.isArray(t)?t[e]:t}function kt(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function Et(t,e){t.filter(Boolean).forEach(function(t){t.style[p("transitionDuration")]=e+"ms"})}function Tt(t){var e=window.scrollX||window.pageXOffset,n=window.scrollY||window.pageYOffset;t.focus(),scroll(e,n)}var St={},At=function(t){return function(e){return e===St&&t}},Ct=function(){function t(e){for(var n in d(this,t),e)this[n]=e[n];this.state={destroyed:!1,visible:!1,enabled:!0},this._=At({mutationObservers:[]})}return u(t,[{key:"enable",value:function(){this.state.enabled=!0}},{key:"disable",value:function(){this.state.enabled=!1}},{key:"show",value:function(t){var e=this;if(!this.state.destroyed&&this.state.enabled){var n=this.popper,o=this.reference,r=this.options,i=m(n),a=i.tooltip,s=i.backdrop,l=i.content;r.dynamicTitle&&!o.getAttribute("data-original-title")||o.hasAttribute("disabled")||(o.refObj||document.documentElement.contains(o)?(r.onShow.call(n,this),t=xt(void 0!==t?t:r.duration,0),Et([n,a,s],0),n.style.visibility="visible",this.state.visible=!0,function(t){var e=this.options;this.popperInstance?(this.popperInstance.scheduleUpdate(),e.livePlacement&&!Ot.call(this)&&this.popperInstance.enableEventListeners()):(this.popperInstance=Ft.call(this),e.livePlacement||this.popperInstance.disableEventListeners());if(!Ot.call(this)){var n=m(this.popper),o=n.arrow;o&&(o.style.margin=""),this.popperInstance.reference=this.reference}(function(t,e,n){var o=t.popper,r=t.options,i=r.onCreate,a=r.onUpdate;r.onCreate=r.onUpdate=function(){(function(t){t.offsetHeight})(o),e&&e(),a(),r.onCreate=i,r.onUpdate=a},n||t.scheduleUpdate()})(this.popperInstance,t,!0),e.appendTo.contains(this.popper)||e.appendTo.appendChild(this.popper)}.call(this,function(){if(e.state.visible){if(Ot.call(e)||e.popperInstance.scheduleUpdate(),Ot.call(e)){e.popperInstance.disableEventListeners();var i=xt(r.delay,0),c=e._(St).lastTriggerEvent;c&&e._(St).followCursorListener(i&&e._(St).lastMouseMoveEvent?e._(St).lastMouseMoveEvent:c)}Et([a,s,s?l:null],t),s&&getComputedStyle(s)[p("transform")],r.interactive&&o.classList.add("tippy-active"),r.sticky&&function(){var t=this;!function e(){t.popperInstance&&t.popperInstance.update(),t.popper.style[p("transitionDuration")]=t.options.updateDuration+"ms",t.state.visible?requestAnimationFrame(e):t.popper.style[p("transitionDuration")]=""}()}.call(e),kt([a,s],"visible"),Dt.call(e,t,function(){r.updateDuration||a.classList.add("tippy-notransition"),r.interactive&&Tt(n),o.setAttribute("aria-describedby","tippy-"+e.id),r.onShown.call(n,e)})}})):this.destroy())}}},{key:"hide",value:function(t){var e=this;if(!this.state.destroyed&&this.state.enabled){var n,o=this.popper,r=this.reference,i=this.options,a=m(o),s=a.tooltip,l=a.backdrop,p=a.content;i.onHide.call(o,this),t=xt(void 0!==t?t:i.duration,1),i.updateDuration||s.classList.remove("tippy-notransition"),i.interactive&&r.classList.remove("tippy-active"),o.style.visibility="hidden",this.state.visible=!1,Et([s,l,l?p:null],t),kt([s,l],"hidden"),i.interactive&&i.trigger.indexOf("click")>-1&&Tt(r),this.popperInstance.disableEventListeners(),n=function(){Dt.call(e,t,function(){!e.state.visible&&i.appendTo.contains(o)&&(e._(St).isPreparingToShow||(document.removeEventListener("mousemove",e._(St).followCursorListener),e._(St).lastMouseMoveEvent=null),r.removeAttribute("aria-describedby"),i.appendTo.removeChild(o),i.onHidden.call(o,e))})},requestAnimationFrame(function(){setTimeout(n,1)})}}},{key:"destroy",value:function(){var t=this,e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(!this.state.destroyed){this.state.visible&&this.hide(0),this.listeners.forEach(function(e){t.reference.removeEventListener(e.event,e.handler)}),this.title&&this.reference.setAttribute("title",this.title),delete this.reference._tippy;["data-original-title","data-tippy","data-tippy-delegate"].forEach(function(e){t.reference.removeAttribute(e)}),this.options.target&&e&&l(this.reference.querySelectorAll(this.options.target)).forEach(function(t){return t._tippy&&t._tippy.destroy()}),this.popperInstance&&this.popperInstance.destroy(),this._(St).mutationObservers.forEach(function(t){t.disconnect()}),this.state.destroyed=!0}}}]),t}();function Ot(){var t=this._(St).lastTriggerEvent;return this.options.followCursor&&!o.usingTouch&&t&&"focus"!==t.type}function Lt(t){var e=this,n=this.options;if(Pt.call(this),!this.state.visible)if(n.target)(function(t){var e=wt(t.target,this.options.target);if(e&&!e._tippy){var n=e.getAttribute("title")||this.title;n&&(e.setAttribute("title",n),Ht(e,f({},this.options,{target:null})),Lt.call(e._tippy,t))}}).call(this,t);else if(this._(St).isPreparingToShow=!0,n.wait)n.wait.call(this.popper,this.show.bind(this),t);else{if(Ot.call(this)){this._(St).followCursorListener||function(){var t=this;this._(St).followCursorListener=function(e){var n=t._(St).lastMouseMoveEvent=e,o=n.clientX,r=n.clientY;t.popperInstance&&(t.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:r,left:o,right:o,bottom:r}},clientWidth:0,clientHeight:0},t.popperInstance.scheduleUpdate())}}.call(this);var o=m(this.popper).arrow;o&&(o.style.margin="0"),document.addEventListener("mousemove",this._(St).followCursorListener)}var r=xt(n.delay,0);r?this._(St).showTimeout=setTimeout(function(){e.show()},r):this.show()}}function It(){var t=this;if(Pt.call(this),this.state.visible){this._(St).isPreparingToShow=!1;var e=xt(this.options.delay,1);e?this._(St).hideTimeout=setTimeout(function(){t.state.visible&&t.hide()},e):this.hide()}}function Mt(){var t=this;return{onTrigger:function(e){if(t.state.enabled){var n=o.supportsTouch&&o.usingTouch&&["mouseenter","mouseover","focus"].indexOf(e.type)>-1;n&&t.options.touchHold||(t._(St).lastTriggerEvent=e,"click"===e.type&&"persistent"!==t.options.hideOnClick&&t.state.visible?It.call(t):Lt.call(t,e),n&&o.iOS&&t.reference.click&&t.reference.click())}},onMouseLeave:function(e){if(!(["mouseleave","mouseout"].indexOf(e.type)>-1&&o.supportsTouch&&o.usingTouch&&t.options.touchHold)){if(t.options.interactive){var n=It.bind(t);return document.body.addEventListener("mouseleave",n),void document.addEventListener("mousemove",function e(o){var i=wt(o.target,r.REFERENCE),a=wt(o.target,r.POPPER)===t.popper,s=i===t.reference;a||s||function(t,e,n){if(!e.getAttribute("x-placement"))return!0;var o=t.clientX,r=t.clientY,i=n.interactiveBorder,a=n.distance,s=e.getBoundingClientRect(),l=ut(e),p=i+a,c={top:s.top-r>i,bottom:r-s.bottom>i,left:s.left-o>i,right:o-s.right>i};switch(l){case"top":c.top=s.top-r>p;break;case"bottom":c.bottom=r-s.bottom>p;break;case"left":c.left=s.left-o>p;break;case"right":c.right=o-s.right>p}return c.top||c.bottom||c.left||c.right}(o,t.popper,t.options)&&(document.body.removeEventListener("mouseleave",n),document.removeEventListener("mousemove",e),It.call(t,e))})}It.call(t)}},onBlur:function(e){if(e.target===t.reference&&!o.usingTouch){if(t.options.interactive){if(!e.relatedTarget)return;if(wt(e.relatedTarget,r.POPPER))return}It.call(t)}},onDelegateShow:function(e){wt(e.target,t.options.target)&&Lt.call(t,e)},onDelegateHide:function(e){wt(e.target,t.options.target)&&It.call(t)}}}function Ft(){var t=this,e=this.popper,n=this.reference,o=this.options,i=m(e).tooltip,a=o.popperOptions,s="round"===o.arrowType?r.ROUND_ARROW:r.ARROW,l=i.querySelector(s),p=f({placement:o.placement},a||{},{modifiers:f({},a?a.modifiers:{},{arrow:f({element:s},a&&a.modifiers?a.modifiers.arrow:{}),flip:f({enabled:o.flip,padding:o.distance+5,behavior:o.flipBehavior},a&&a.modifiers?a.modifiers.flip:{}),offset:f({offset:o.offset},a&&a.modifiers?a.modifiers.offset:{})}),onCreate:function(){i.style[ut(e)]=yt(o.distance),l&&o.arrowTransform&&ht(e,l,o.arrowTransform)},onUpdate:function(){var t=i.style;t.top="",t.bottom="",t.left="",t.right="",t[ut(e)]=yt(o.distance),l&&o.arrowTransform&&ht(e,l,o.arrowTransform)}});return Rt.call(this,{target:e,callback:function(){t.popperInstance.update()},options:{childList:!0,subtree:!0,characterData:!0}}),new dt(n,e,p)}function Pt(){var t=this._(St),e=t.showTimeout,n=t.hideTimeout;clearTimeout(e),clearTimeout(n)}function Rt(t){var e=t.target,n=t.callback,o=t.options;if(window.MutationObserver){var r=new MutationObserver(n);r.observe(e,o),this._(St).mutationObservers.push(r)}}function Dt(t,e){if(!t)return e();var n=m(this.popper).tooltip,o=function(t,e){e&&n[t+"EventListener"]("ontransitionend"in window?"transitionend":"webkitTransitionEnd",e)},r=function t(r){r.target===n&&(o("remove",t),e())};o("remove",this._(St).transitionendListener),o("add",r),this._(St).transitionendListener=r}var Yt=1;function Xt(t,e){return t.reduce(function(t,r){var i=Yt,s=function(t,e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),"function"==typeof e.html&&(e.html=e.html(t)),e}(r,e.performance?e:function(t,e){var n=a.reduce(function(n,o){var r=t.getAttribute("data-tippy-"+o.toLowerCase())||e[o];return"false"===r&&(r=!1),"true"===r&&(r=!0),isFinite(r)&&!isNaN(parseFloat(r))&&(r=parseFloat(r)),"target"!==o&&"string"==typeof r&&"["===r.trim().charAt(0)&&(r=JSON.parse(r)),n[o]=r,n},{});return f({},e,n)}(r,e)),l=r.getAttribute("title");if(!(l||s.target||s.html||s.dynamicTitle))return t;r.setAttribute(s.target?"data-tippy-delegate":"data-tippy",""),h(r);var d=function(t,e,n){var o=c();o.setAttribute("class","tippy-popper"),o.setAttribute("role","tooltip"),o.setAttribute("id","tippy-"+t),o.style.zIndex=n.zIndex,o.style.maxWidth=n.maxWidth;var r=c();r.setAttribute("class","tippy-tooltip"),r.setAttribute("data-size",n.size),r.setAttribute("data-animation",n.animation),r.setAttribute("data-state","hidden"),n.theme.split(" ").forEach(function(t){r.classList.add(t+"-theme")});var i=c();if(i.setAttribute("class","tippy-content"),n.arrow){var a=c();a.style[p("transform")]=n.arrowTransform,"round"===n.arrowType?(a.classList.add("tippy-roundarrow"),a.innerHTML='<svg viewBox="0 0 24 8" xmlns="http://www.w3.org/2000/svg"><path d="M3 8s2.021-.015 5.253-4.218C9.584 2.051 10.797 1.007 12 1c1.203-.007 2.416 1.035 3.761 2.782C19.012 8.005 21 8 21 8H3z"/></svg>'):a.classList.add("tippy-arrow"),r.appendChild(a)}if(n.animateFill){r.setAttribute("data-animatefill","");var s=c();s.classList.add("tippy-backdrop"),s.setAttribute("data-state","hidden"),r.appendChild(s)}n.inertia&&r.setAttribute("data-inertia",""),n.interactive&&r.setAttribute("data-interactive","");var l=n.html;if(l){var d=void 0;l instanceof Element?(i.appendChild(l),d="#"+(l.id||"tippy-html-template")):(i.innerHTML=document.querySelector(l).innerHTML,d=l),o.setAttribute("data-html",""),r.setAttribute("data-template-id",d),n.interactive&&o.setAttribute("tabindex","-1")}else i[n.allowTitleHTML?"innerHTML":"textContent"]=e;return r.appendChild(i),o.appendChild(r),o}(i,l,s),u=new Ct({id:i,reference:r,popper:d,options:s,title:l,popperInstance:null});s.createPopperInstanceOnInit&&(u.popperInstance=Ft.call(u),u.popperInstance.disableEventListeners());var y=Mt.call(u);return u.listeners=s.trigger.trim().split(" ").reduce(function(t,e){return t.concat(function(t,e,r,i){var a=r.onTrigger,s=r.onMouseLeave,l=r.onBlur,p=r.onDelegateShow,c=r.onDelegateHide,d=[];if("manual"===t)return d;var u=function(t,n){e.addEventListener(t,n),d.push({event:t,handler:n})};return i.target?(o.supportsTouch&&i.touchHold&&(u("touchstart",p),u("touchend",c)),"mouseenter"===t&&(u("mouseover",p),u("mouseout",c)),"focus"===t&&(u("focusin",p),u("focusout",c)),"click"===t&&u("click",p)):(u(t,a),o.supportsTouch&&i.touchHold&&(u("touchstart",a),u("touchend",s)),"mouseenter"===t&&u("mouseleave",s),"focus"===t&&u(n?"focusout":"blur",l)),d}(e,r,y,s))},[]),s.dynamicTitle&&Rt.call(u,{target:r,callback:function(){var t=m(d).content,e=r.getAttribute("title");e&&(t[s.allowTitleHTML?"innerHTML":"textContent"]=u.title=e,h(r))},options:{attributes:!0}}),r._tippy=u,d._tippy=u,d._reference=r,t.push(u),Yt++,t},[])}function Nt(t){l(document.querySelectorAll(r.POPPER)).forEach(function(e){var n=e._tippy;if(n){var o=n.options;!(!0===o.hideOnClick||o.trigger.indexOf("focus")>-1)||t&&e===t.popper||n.hide()}})}var _t=!1;function Ht(t,e,n){var a,p,c,d;o.supported&&!_t&&(p=function(){o.usingTouch||(o.usingTouch=!0,o.iOS&&document.body.classList.add("tippy-touch"),o.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",c),o.onUserInputChange("touch"))},a=void 0,c=function(){var t=performance.now();t-a<20&&(o.usingTouch=!1,document.removeEventListener("mousemove",c),o.iOS||document.body.classList.remove("tippy-touch"),o.onUserInputChange("mouse")),a=t},document.addEventListener("click",function(t){if(!(t.target instanceof Element))return Nt();var e=wt(t.target,r.REFERENCE),n=wt(t.target,r.POPPER);if(!(n&&n._tippy&&n._tippy.options.interactive)){if(e&&e._tippy){var i=e._tippy.options,a=i.trigger.indexOf("click")>-1,s=i.multiple;if(!s&&o.usingTouch||!s&&a)return Nt(e._tippy);if(!0!==i.hideOnClick||a)return}Nt()}}),document.addEventListener("touchstart",p),window.addEventListener("blur",function(){var t=document.activeElement;t&&t.blur&&gt.call(t,r.REFERENCE)&&t.blur()}),window.addEventListener("resize",function(){l(document.querySelectorAll(r.POPPER)).forEach(function(t){var e=t._tippy;e&&!e.options.livePlacement&&e.popperInstance.scheduleUpdate()})}),o.supportsTouch||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints||document.addEventListener("pointerdown",p),_t=!0),s(t)&&((d=t).refObj=!0,d.attributes=d.attributes||{},d.setAttribute=function(t,e){d.attributes[t]=e},d.getAttribute=function(t){return d.attributes[t]},d.removeAttribute=function(t){delete d.attributes[t]},d.hasAttribute=function(t){return t in d.attributes},d.addEventListener=function(){},d.removeEventListener=function(){},d.classList={classNames:{},add:function(t){return d.classList.classNames[t]=!0},remove:function(t){return delete d.classList.classNames[t],!0},contains:function(t){return t in d.classList.classNames}}),e=f({},i,e);var u=function(t){if(t instanceof Element||s(t))return[t];if(t instanceof NodeList)return l(t);if(Array.isArray(t))return t;try{return l(document.querySelectorAll(t))}catch(t){return[]}}(t),m=u[0];return{selector:t,options:e,tooltips:o.supported?Xt(n&&m?[m]:u,e):[],destroyAll:function(){this.tooltips.forEach(function(t){return t.destroy()}),this.tooltips=[]}}}return Ht.version="2.5.2",Ht.browser=o,Ht.defaults=i,Ht.one=function(t,e){return Ht(t,e,!0).tooltips[0]},Ht.disableAnimations=function(){i.updateDuration=i.duration=0,i.animateFill=!1},function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t&&o.supported){var n=document.head||document.querySelector("head"),r=document.createElement("style");r.type="text/css",n.insertBefore(r,n.firstChild),r.styleSheet?r.styleSheet.cssText=e:r.appendChild(document.createTextNode(e))}}('.tippy-touch{cursor:pointer!important}.tippy-notransition{transition:none!important}.tippy-popper{max-width:350px;-webkit-perspective:700px;perspective:700px;z-index:9999;outline:0;transition-timing-function:cubic-bezier(.165,.84,.44,1);pointer-events:none;line-height:1.4}.tippy-popper[data-html]{max-width:96%;max-width:calc(100% - 20px)}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-8px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;bottom:-7px;margin:0 6px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 90%;transform-origin:0 90%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(-50%,25%);transform:scale(6) translate(-50%,25%);opacity:1}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1) translate(-50%,25%);transform:scale(1) translate(-50%,25%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px) rotateX(0);transform:translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) rotateX(90deg);transform:translateY(0) rotateX(90deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) scale(0);transform:translateY(0) scale(0)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-8px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;top:-7px;margin:0 6px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -90%;transform-origin:0 -90%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(-50%,-125%);transform:scale(6) translate(-50%,-125%);opacity:1}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1) translate(-50%,-125%);transform:scale(1) translate(-50%,-125%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateY(10px) rotateX(0);transform:translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) rotateX(-90deg);transform:translateY(0) rotateX(-90deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) scale(0);transform:translateY(0) scale(0)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-16px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:100% 0;transform-origin:100% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(40%,-50%);transform:scale(6) translate(40%,-50%);opacity:1}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1.5) translate(40%,-50%);transform:scale(1.5) translate(40%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px) rotateY(0);transform:translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) rotateY(-90deg);transform:translateX(0) rotateY(-90deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) scale(0);transform:translateX(0) scale(0)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-16px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-100% 0;transform-origin:-100% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(-140%,-50%);transform:scale(6) translate(-140%,-50%);opacity:1}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1.5) translate(-140%,-50%);transform:scale(1.5) translate(-140%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateX(10px) rotateY(0);transform:translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) rotateY(90deg);transform:translateX(0) rotateY(90deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) scale(0);transform:translateX(0) scale(0)}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:.9rem;padding:.3rem .6rem;text-align:center;will-change:transform;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;background-color:#333}.tippy-tooltip[data-size=small]{padding:.2rem .4rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.4rem .8rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-animatefill] .tippy-content{transition:-webkit-clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98),-webkit-clip-path cubic-bezier(.46,.1,.52,.98)}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.53,2,.36,.85)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:24px;height:8px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:26%;left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(100% 100% at 50% 50%);clip-path:ellipse(100% 100% at 50% 50%)}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(5% 50% at 50% 50%);clip-path:ellipse(5% 50% at 50% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 0 50%);clip-path:ellipse(135% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(40% 100% at 0 50%);clip-path:ellipse(40% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 100% 50%);clip-path:ellipse(135% 100% at 100% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(40% 100% at 100% 50%);clip-path:ellipse(40% 100% at 100% 50%)}@media (max-width:360px){.tippy-popper{max-width:96%;max-width:calc(100% - 20px)}}'),Ht},t.exports=n()}).call(this,n(7))},function(t,e){t.exports=[{topic:"Air quality",key:"FUGV49UB",title:"Explore how oil and gas development can affect local and regional air quality"},{topic:"Climate change",key:"CMPFGPRK",title:"Examine the implications of increased oil and gas development for climate change"},{topic:"Community impacts",key:"V538Y7T9",title:"undefined"},{topic:"Community-industry interaction",key:"F8Q5D6RS",title:"Understand how communities and oil and gas companies interact on a variety of issues"},{topic:"Cumulative impacts",key:"missing1",title:"Explore studies that aggregate multiple effects of oil and gas development"},{topic:"Economics of shale development",key:"42H54TQS",title:"Examine the costs, innovations, and trends that shape the economics of shale development"},{topic:"Ecosystems, habitats, species",key:"M43C6MTF",title:"Understand how oil and gas development can affect local and regional ecosystems, habitats, and species"},{topic:"Environmental justice",key:"X5ZEDSMQ",title:"Does oil and gas development have a disproportionate impact on low-income or minority communities?"},{topic:"Federal regulation",key:"SFLUS5I4",title:"How does the federal government regulate the oil and gas industry?"},{topic:"Groundwater",key:"Q7MVJ2ED",title:"Understand the potential impacts of oil and gas development on groundwater resources"},{topic:"Human health",key:"5W2ZJTJC",title:"Explore the potential impacts of oil and gas development on human health"},{topic:"Local governments",key:"EXLS3NV4",title:"Understand how oil and gas development affects local governments"},{topic:"National (US)/sectoral economy",key:"4NPI3GYM",title:"Examine the economic impacts of oil and gas development for the U.S. and major economic sectors"},{topic:"Occupational hazards",key:"missing2",title:"What are the risks of working in oil and gas production?"},{topic:"Property values",key:"NXSYV4IM",title:"How does oil and gas development affect nearby property values?"},{topic:"Public opinion",key:"YJDYU9VM",title:"How does the public view the effects of oil and gas development?"},{topic:"Quality of life/Community impacts",key:"XN7GXNFQ",title:"Examine community impacts such as housing affordability, crime, education, truck traffic, noise, and more"},{topic:"Seismicity",key:"FWMYGUWI",title:"Explore the connection between oil and gas development and earthquakes"},{topic:"State government",key:"APRI3VMZ",title:"Understand how state governments are affected by, and how they affect, oil and gas development"},{topic:"State regulation",key:"9IL3TCKF",title:"How do state governments regulate the oil and gas industry?"},{topic:"Subnational economies",key:"X9DSTIGE",title:"Examine how oil and gas development affects local, state, and regional economies"},{topic:"Surface water",key:"QCW37PP2",title:"Examine the impacts of oil and gas development on the quantity and quality of surface water resources"}]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ /]/g,"-").replace(/['"”’“‘,.!?;()&]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},void(String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."}))},,function(t,e,n){},function(t,e,n){"use strict";n(12),n(10);var o,r,i,a,s=u(n(9)),l=u(n(8)),p=n(6),c=n(3),d=u(n(0));function u(t){return t&&t.__esModule?t:{default:t}}function f(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}o="2127948",r={gateCheck:0,searchType:"fields",init:function(t){window.RFFApp.model.topicButtonPromise=new Promise(function(t){window.RFFApp.model.resolveTopicButtons=t}),this.getZoteroCollections(t),this.getZoteroItems(t),this.setupSearch(),console.log(s.default)},clearSearch:function(){var t=document.querySelector("#collection-search input");t.value="",t.setAttribute("placeholder","Search the collection (by title, author, or year)")},setupSearch:function(){document.getElementById("collection-search").onsubmit=function(t){t.preventDefault(),a.loading(!0);var e=this.querySelector("input").value,n="https://api.zotero.org/groups/"+o+"/items?q="+e+"&format=keys";new Promise(function(t,e){d3.text(n,function(n,o){if(n)throw e(n),n;t(o.split(/\n/))})}).then(function(t){console.log(t),""!==t[0]&&(r.getSearchItems(t,e),a.loading(!1))})}},getSearchItems:function(t,e){var n=i.zoteroItems.filter(function(e){return-1!==t.indexOf(e.key)});console.log(n),c.filterResults.call(a,n,r),a.updatePieChart(n,'matching search: "'+e+'"')},childrenify:function(t){return console.log(t),t.forEach(function(e){if(!1!==e.data.parentCollection&&e.meta.numItems>0){var n=t.find(function(t){return t.key===e.data.parentCollection});void 0!==n&&(n.children=n.children||[],n.children.push(e))}}),t},returnKeyValues:function(t,e){return t.slice(1).map(function(n){return n.reduce(function(n,o,r){return n[t[0][r]]=!0===e?isNaN(+o)||""===o?o:+o:o,n},{})})},nestPrelim:function(t){return t.reduce(function(t,e){if("string"!=typeof e&&"function"!=typeof e)throw"each nestBy item must be a string or function";var n;return"string"==typeof e&&(n=t.key(function(t){return t[e]})),"function"==typeof e&&(n=t.key(function(t){return e(t)})),n},d3.nest())},recursiveNest:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"series";if("string"==typeof e||"function"==typeof e)this.nestByArray=[e];else{if(!Array.isArray(e))throw"nestBy variable must be a string, function, or array of strings or functions";this.nestByArray=e}var o=this.nestPrelim(this.nestByArray);return"object"===n?o.object(t):o.entries(t)},getZoteroCollections:function(t){var e=this;t?d3.json("data/zoteroCollections-7-25-18.json",function(t,n){if(t)throw t;i.collections=e.childrenify(n),console.log("increment gateCheck from get collections"),e.gateCheck++,a.init()}):new Promise(function(t,n){var r=0;(function e(){var a=this;d3.json("https://api.zotero.org/groups/"+o+"/collections?limit=100",function(o,s){if(console.log(s),o){if(!(r<3))throw n(o),o;console.log("Error, attempt "+r+": ",o),r++,e()}else console.log(JSON.stringify(s)),i.collections=a.childrenify(s),t(i.collections)})}).call(e)}).then(function(t){console.log(t),console.log("increment gateCheck from get collections"),e.gateCheck++,a.init()})},getZoteroItems:function(t){var e=this;if(t)d3.json("data/zoteroItems-7-25-18.json",function(t,n){if(t)throw t;i.zoteroItems=n,e.parseZoteroItemDates(),console.log("increment gateCheck from get items"),e.gateCheck++,a.init()});else{for(var n=[],r=[],s=0;s<9;s++)setTimeout(n.push(l(s)),500*s);Promise.race(n).then(function(t){if(console.log(t),t.total>9){for(var o=9;o<Math.ceil(t.total/100);o++)r.push(l(o));Promise.all([].concat(n,r)).then(function(t){window.dateStrings=[],t.forEach(function(t){var e;(e=i.zoteroItems).push.apply(e,f(t.data))}),console.log(JSON.stringify(i.zoteroItems)),e.parseZoteroItemDates(),e.gateCheck++,a.init()})}else Promise.all(n).then(function(t){console.log(t),t.forEach(function(t){var e;(e=i.zoteroItems).push.apply(e,f(t.data))}),e.parseZoteroItemDates(),e.gateCeck++,a.init()})})}function l(t){return new Promise(function(e,n){var r=0;!function i(){d3.request("https://api.zotero.org/groups/"+o+"/items/top?include=data,bib&limit=100&start="+100*t,function(t,o){if(t){if(!(r<3))throw n(t),t;console.log("Error, attempt "+r+": ",t),r++,i()}else console.log(+o.getResponseHeader("last-modified-version")),e({total:+o.getResponseHeader("Total-Results"),data:JSON.parse(o.responseText)})})}()})}},parseZoteroItemDates:function(){var t=this;i.zoteroItems.forEach(function(e){var n=t.getDatesFromString(e.data.date);e.data.dateString=n.display,e.data.dateValue=n.value}),i.zoteroItems.sort(function(t,e){return d3.descending(t.data.dateValue,e.data.dateValue)})},getCollectionItems:function(t){console.log("In get collection Items"),console.log(t);var e=[],n=[];"initial"!==t&&(e="syntheses-only"!==t?[i.collections.find(function(e){return e.key===t})]:i.collections);var o="initial"===t?i.zoteroItems:"syntheses-only"===t?[]:i.zoteroItems.filter(function(e){return-1!==e.data.collections.indexOf(t)});console.log(o),e.forEach(function(t){void 0!==t&&t.children&&t.children.forEach(function(t){var e=i.zoteroItems.filter(function(e){return-1!==e.data.collections.indexOf(t.key)&&("Literature Review"===t.data.name||"Issue Brief"===t.data.name)});e.forEach(function(e){console.log(t.data),e.synthesisType=t.data.name}),n.push.apply(n,f(e))})}),c.createResultsContainer.call(a),c.filterResults.call(a,o,r,t),a.filterSynthesisResults(n),a.updatePieChart(o,0===e.length?"All topics":1===e.length?e[0].data.name:"Curated reviews")},getDatesFromString:function(t){var e=new Date(1776,3,4),n="",o={forthcoming:/forthcoming/,yyyy:/^(\d{4})$/,yyyymmdd:/(\d{4})[-/](\d{1,2})[-/](\d{1,2})/,monthddyyyy:/^(\w+)\.* *(\d{1,2}), *(\d{4})/,monthyyyy:/^(\w+)\.* (\d{4})/,yyyymm:/^(\d{4})[-/](\d{1,2})$/,mmddyyyy:/^(\d{1,2})[-/](\d{1,2})[-/](\d{4})/,yyyyyyyy:/^(\d{4})[-–—]\d{4}/,yyyymonthdd:/^(\d{4}) *(\w+)\.* *(\d{1,2})/};function r(t){return void 0!==i[t]&&isNaN(i[t])?i[t]:t}var i={0:"January",1:"February",2:"March",3:"April",4:"May",5:"June",6:"July",7:"August",8:"September",9:"October",10:"November",11:"December",January:0,February:1,March:2,April:3,May:4,June:5,July:6,August:7,September:8,October:9,November:10,December:11,Winter:11,Spring:2,Summer:5,Fall:8,Autumn:8,Jan:"January",Feb:"February",Mar:"March",Apr:"April",Jun:"June",Jul:"July",Aug:"August",Sep:"September",Sept:"September",Oct:"October",Nov:"Novemeber",Dec:"December"};for(var a in o)if(o.hasOwnProperty(a)&&void 0!==t){var s=t.match(o[a]);if(null!==s)switch(a){case"yyyy":n=t,e=new Date(+s[1],0,1);break;case"yyyymmdd":n=i[(+s[2]-1).toString()]+" "+ +s[3]+", "+s[1],e=new Date(+s[1],+s[2]-1,+s[3]);break;case"monthddyyyy":n=r(s[1])+" "+ +s[2]+", "+s[3],e=new Date(+s[3],i[r(s[1])],+s[2]);break;case"monthyyyy":n=r(s[1])+" "+s[2],e=new Date(+s[2],i[r(s[1])],1);break;case"yyyymm":n=i[+s[2]-1]+" "+s[1],e=new Date(+s[1],+s[2]-1,1);break;case"mmddyyyy":n=i[+s[1]-1]+" "+ +s[2]+", "+s[3],e=new Date(+s[3],+s[1]-1,+s[2]);break;case"yyyyyyyy":n=t.replace("-","—").replace("-","–"),e=new Date(+s[1],0,1);break;case"yyyymonthdd":n=r(s[2])+" "+ +s[3]+", "+s[1],e=new Date(+s[1],i[r(s[2])],+s[3]);break;case"forthcoming":n="forthcoming",e=new Date}}return{value:e,display:n}},biblioTooltips:function(){(0,l.default)(".tippy-clipboard",{arrow:!0,theme:"RFF",trigger:"manual"}),(0,l.default)(".copy-bib",{arrow:!0,hideOnClick:!1,interactive:!0,theme:"RFF"})},copyBibText:function(){var t=this;this.parentNode.querySelector(".bib-container").select();try{var e=document.execCommand("copy"),n=e?"successful":"unsuccessful";console.log("Copying text command was "+n),e&&(this.parentNode._tippy.show(),setTimeout(function(){t.parentNode._tippy.hide()},1e3))}catch(t){console.log("Oops, unable to copy")}}},i={zoteroItems:[]},a={init:function(){d.default.polyfill(),console.log(r.gateCheck),r.gateCheck<2||(console.log("READY!"),console.log(i.zoteroItems),this.renderTopicButtons(),this.attachTooltips(),console.log(i.collections),r.getCollectionItems("initial"),this.setupSidebar(),this.loading(!1))},smoothScroll:function(t){t.scrollIntoView({behavior:"smooth"})},attachTooltips:function(){document.querySelectorAll(".browse-buttons > div").forEach(function(t){var e=s.default.find(function(e){return e.key===t.dataset.collection});void 0!==e&&(t.setAttribute("title",e.title),l.default.one(t,{theme:"RFF",arrow:!0}))})},setupSidebar:function(){var t=d3.max(i.zoteroItems,function(t){return new Date(t.data.dateModified)}),e=d3.max(i.zoteroItems,function(t){return t.data.version}),n=document.querySelector("#sidebar"),o="\n            <h2>Library info</h2>\n            <p>Date last modified: "+t.getDate()+" "+{0:"January",1:"February",2:"March",3:"April",4:"May",5:"June",6:"July",7:"August",8:"September",9:"October",10:"November",11:"December"}[t.getMonth()]+" "+t.getFullYear()+"<br />(Version "+e+")</p>\n            ";n.insertAdjacentHTML("beforeend",o),this.sidebarContact(),this.sibebarDocumentation(),this.makePieChart()},sibebarDocumentation:function(){var t=document.createElement("div");t.className="documentation",t.innerHTML='\n            <h3>Documentation</h3>\n            <p><a href="http://www.rff.org/files/faq.pdf">SHARC Frequently Asked Questions</a> (PDF)</p>\n            <p><a href="http://www.rff.org/files/how-sharc-is-built.pdf">How SHARC Is Built</a> (PDF)</p>\n            ',document.querySelector("#sidebar").append(t)},sidebarContact:function(){var t=document.createElement("div");t.className="contact-us",t.innerHTML='\n            <h3>Get in touch</h3>\n              <form>\x3c!--<form method="POST" action="http://formspree.io/XXXXXXX" _lpchecked="1">--\x3e\n              <input type="email" name="email" placeholder="Your email">\n              <textarea name="message" placeholder="Your message"></textarea>\n                <input type="text" name="_gotcha" style="display:none">\n                <input type="hidden" name="_next" value="/projects/?thanks">\n              <button type="submit">Send</button>\n            </form>\n          ',document.querySelector("#sidebar").append(t)},makePieChart:function(){var t=d3.select("#sidebar2").append("svg").attr("width","100%").attr("xmlns","http://www.w3.org/2000/svg").attr("version","1.1").attr("viewBox","0 0 100 62").attr("focusable",!1).attr("aria-labelledby","svgTitle svgDesc").attr("role","graphics-dataunit").attr("class","pubtype-pie");t.append("title").attr("id","svgTitle").text("Pie chart of publication types"),t.append("desc").attr("id","svgDesc").text("Pie chart of publication types"),t.append("g"),d3.select("#sidebar2 svg").append("g").attr("class","legend"),d3.select("#sidebar2 svg").append("text").attr("class","total").attr("font-size",10).attr("text-anchor","middle"),this.updatePieChart(i.zoteroItems,"All topics")},updatePieChart:function(t,e){d3.select("#sidebar2 #pie-header").text(e),console.log(t);var n=d3.nest().key(function(t){return t.data.itemType}).rollup(function(t){return t.length}).entries(t.filter(function(t){return"attachment"!==t.data.itemType})).sort(function(t,e){return d3.descending(t.value,e.value)}),o=n.reduce(function(t,e){return t+e.value},0),r=[];n.forEach(function(t,e){if(e<4)r.push({name:t.key,value:t.value});else if(4===e){var o=n.slice(e).reduce(function(t,e){return t+e.value},0);r.push({name:"other",value:o})}}),console.log(r);var i=d3.pie().sort(null).value(function(t){return t.value});console.log(i(r));var a=d3.arc().outerRadius(30).innerRadius(20),s=d3.arc().outerRadius(25.5).innerRadius(25.5),l=d3.select("#sidebar2 svg g").attr("transform","translate(30,30)").selectAll(".arc").data(i(r),function(t){return t.data.name});l.select("path").attr("d",a),l.select("text").attr("transform",function(t){return"translate("+s.centroid(t)+")"}).text(function(t){return t.data.value}),l.exit().remove();var p=l.enter().append("g").attr("class",function(t){return console.log(t),"arc "+t.data.name});p.append("path").attr("d",a),p.append("text").attr("transform",function(t){return"translate("+s.centroid(t)+")"}).attr("dy","0.35em").attr("text-anchor","middle").attr("font-size",4).attr("fill",function(t){return"journalArticle"===t.data.name||"book"===t.data.name||"report"===t.data.name?"#ffffff":"#000000"}).text(function(t){return t.data.value});var c={journalArticle:"journal articles",report:"reports",webpage:"webpages",book:"books",other:"other",bookSection:"chapters",document:"documents",magazineArticle:"magazine articles",presentation:"presentations"},d=d3.select("#sidebar2 svg g.legend").attr("transform","translate(65,2)").selectAll(".legend-item").data(i(r),function(t){return t.data.name});d.select("g.legend-item").attr("transform",function(t,e){return"translate(0,"+7*e+")"}),d.exit().remove();var u=d.enter().append("g").attr("class",function(t){return"legend-item "+t.data.name}).attr("transform",function(t,e){return"translate(0,"+7*e+")"});u.append("rect").attr("width",5).attr("height",5),u.append("text").attr("transform","translate(7,4)").attr("font-size",4).text(function(t){return c[t.data.name]}),d3.select("#sidebar2 svg text.total").attr("transform","translate(30,30)").text(function(){return o>0?o:null})},loading:function(t){t?document.querySelector("body").classList.add("loading"):document.querySelector("body").classList.remove("loading")},renderTopicButtons:function(){var t=document.getElementById("browse-buttons-container"),e=i.collections.filter(function(t){return!1===t.data.parentCollection}).sort(function(t,e){return d3.ascending(t.data.name,e.data.name)});console.log(e),e.filter(function(t){return void 0!==t.children}).forEach(function(e,n){t.appendChild((0,p.createBrowseCategory)(e,n,!0))}),e.filter(function(t){return void 0===t.children}).forEach(function(e,n){t.appendChild((0,p.createBrowseCategory)(e,n,!1))}),window.RFFApp.model.resolveTopicButtons(!0),(0,p.createTopicKey)(),this.renderShowAllButton(),this.renderShowAllSyntheses()},renderShowAllButton:function(){var t=document.createElement("div");t.id="show-all-container",t.className="browse-buttons";var e=document.createElement("div");e.className="button button--secondary show-all active",t.appendChild(e),document.querySelector("#browse-buttons-container").insertAdjacentHTML("afterbegin",t.outerHTML);var n=d3.select("div.show-all");n.on("click",function(){d3.selectAll(".browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),c.filterResults.call(a,void 0,r),a.filterSynthesisResults.call(a,[]),a.updatePieChart(i.zoteroItems,"All topics"),r.clearSearch()}),n.append("span").text("Show full collection")},renderShowAllSyntheses:function(){var t=d3.select("#show-all-container").append("div").attr("class","button button--secondary show-syntheses");t.on("click",function(){d3.selectAll(".browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),r.getCollectionItems("syntheses-only"),r.clearSearch()}),t.append("span").text("Show curated reviews")},filterSynthesisResults:function(t){console.log(t);var e=d3.select(".synthesis-results ul").selectAll(".list-item").data(t,function(t){return t.data.key});console.log(e),e.exit().classed("entered",!1).classed("exiting",!0).transition(1500).remove();var n=e.enter().append("li").attr("id",function(t){return t.key}).attr("class",function(t,e){return(t.synthesisType.cleanString()||t.data.itemType)+" index-"+e+("RFF"===t.data.institution||"Resources for the Future"===t.data.institution?" RFF":"")}).classed("RFF",!0).classed("entering",!0).classed("list-item",!0).html(function(t){return(0,c.createResultItem)(t)}).on("click",function(){window.open("./pdf/"+this.id+".pdf","_blank")});setTimeout(function(){n.classed("entering",!1)}),this.synthesisItems=n.merge(e)}},window.RFFApp={controller:r,model:i},r.init(!0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,