!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=13)}([function(t,e,n){!function(){"use strict";t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style&&!0!==t.__forceSmoothScrollPolyfill__)){var n,o=t.HTMLElement||t.Element,i=468,r={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:o.prototype.scroll||p,scrollIntoView:o.prototype.scrollIntoView},a=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,s=(n=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(n)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?m.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):r.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(l(arguments[0])?r.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==l(arguments[0])){var t=arguments[0].left,e=arguments[0].top;m.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==l(arguments[0])){var n=function(t){var n;do{n=(t=t.parentNode)===e.body}while(!1===n&&!1===u(t));return n=null,t}(this),o=n.getBoundingClientRect(),i=this.getBoundingClientRect();n!==e.body?(m.call(this,n,n.scrollLeft+i.left-o.left,n.scrollTop+i.top-o.top),"fixed"!==t.getComputedStyle(n).position&&t.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):t.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function p(t,e){this.scrollLeft=t,this.scrollTop=e}function l(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(t,e){return"Y"===e?t.clientHeight+s<t.scrollHeight:"X"===e?t.clientWidth+s<t.scrollWidth:void 0}function d(e,n){var o=t.getComputedStyle(e,null)["overflow"+n];return"auto"===o||"scroll"===o}function u(t){var e=c(t,"Y")&&d(t,"Y"),n=c(t,"X")&&d(t,"X");return e||n}function f(e){var n,o,r,s,p=(a()-e.startTime)/i;s=p=p>1?1:p,n=.5*(1-Math.cos(Math.PI*s)),o=e.startX+(e.x-e.startX)*n,r=e.startY+(e.y-e.startY)*n,e.method.call(e.scrollable,o,r),o===e.x&&r===e.y||t.requestAnimationFrame(f.bind(t,e))}function m(n,o,i){var s,l,c,d,u=a();n===e.body?(s=t,l=t.scrollX||t.pageXOffset,c=t.scrollY||t.pageYOffset,d=r.scroll):(s=n,l=n.scrollLeft,c=n.scrollTop,d=p),f({scrollable:s,method:d,startTime:u,startX:l,startY:c,x:o,y:i})}}}}()},,function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.filterResults=e.createResultItem=e.createResultsContainer=void 0;var o,i=n(2),r=(o=i)&&o.__esModule?o:{default:o};console.log(r.default);e.createResultsContainer=function(){document.getElementById("results-container").innerHTML='<div class="synthesis-results">\n                  <ul class="flex space-between"></ul>\n              </div>\n              <div class="results">\n                  <ul class="loadable"></ul>\n              </div> ',this.results=document.querySelector("div.results ul")};var a=e.createResultItem=function(t){var e,n;if(void 0===t.data.creators)e="";else if(e=(n=t.data.creators.map(function(t){return t.firstName+" "+t.lastName})).join(","),2===n.length)e=e.replace(","," and ");else if(n.length>4)e=n[0]+" et al.";else{var o=(e=e.replace(/,/g,", ")).lastIndexOf(",");-1!==o&&(e=e.substr(0,o+1)+" and"+e.substr(o+1))}var i,r,a=t.data.publisher||t.data.journalAbbreviation||t.data.publicationTitle||t.data.institution||t.data.websiteTitle||"",s=document.createElement("div");if(s.className="links-div tippy-clipboard",s.setAttribute("title","Copied to clipboard"),t.data.url&&""!==t.data.url){var p=document.createElement("a");i=t.data.url,p.setAttribute("href",i),p.setAttribute("target","_blank"),p.setAttribute("class","details-link"),p.innerHTML="Go to link",s.appendChild(p)}if(t.bib&&""!==t.bib){var l=document.createElement("div");l.innerHTML=t.bib;var c=l.querySelector(".csl-entry").innerHTML,d=document.createElement("textarea");d.innerHTML=c,d.setAttribute("class","bib-container");var u=document.createElement("a");u.setAttribute("href","#"),u.setAttribute("class","copy-bib"),u.setAttribute("title",c),u.innerHTML="Copy biblio. info",s.appendChild(d),s.appendChild(u)}return r=void 0!==i?'<a class="item-title-link" target="_blank" href="'+i+'">'+t.data.title+"</a>":""+t.data.title,'\n              \n              <div class="summary-results">\n                  <div class="flex space-between">\n                      <span class="flex item-info items-center">\n                          <span class="list-item__label">'+(t.synthesisType||t.data.itemType.undoCamelCase())+'</span>\n                          <span class="list-item__meta publisher-name">'+a.trunc(90,!0)+'</span>\n                      </span>\n                      <span class="list-item__meta">'+t.data.dateString+'</span>\n                  </div>\n                  <h3 class="list-item__title">'+r+'</h3>\n                  <span class="list-item__meta">'+e+"</span>\n                  "+s.outerHTML+"\n              </div>\n              "};e.filterResults=function(t,e){console.log("list-item",t);var n=void 0===t?window.RFFApp.model.zoteroItems:t;console.log(n);var o=d3.select(this.results).selectAll(".list-item").data(n,function(t){return t.key});o.exit().classed("entered",!1).classed("exiting",!0).transition(1500).remove();var i=o.enter().append("li").attr("class",function(t,e){return t.key+" "+t.data.itemType+" index-"+e+("RFF"===t.data.institution||"Resources for the Future"===t.data.institution?" RFF":"")}).classed("entering",!0).classed("list-item",!0).html(function(t){return a(t)});setTimeout(function(){i.classed("entering",!1)}),this.items=i.merge(o),d3.selectAll(".copy-bib").on("click",function(){d3.event.preventDefault(),e.copyBibText.call(this)}),e.biblioTooltips(),this.smoothScroll(document.querySelector(".synthesis-results"))}},,function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createTopicKey=e.createBrowseCategory=void 0;var o,i=n(5),r=(o=i)&&o.__esModule?o:{default:o};console.log(r.default);e.createBrowseCategory=function(t,e,n){var o,i=document.createElement("div");return n?(i.innerHTML="\n      <h3>"+t.data.name+"</h3>\n    ",(o=document.createElement("div")).className="browse-buttons",t.children.sort(function(t,e){return d3.ascending(t.data.name,e.data.name)}).forEach(function(t,e){o.appendChild(a(t))})):((o=document.querySelector(".browse-buttons.uncategorized")||document.createElement("div")).className="browse-buttons uncategorized",0!==t.data.name.indexOf("_")&&o.appendChild(a(t))),console.log(t),i.appendChild(o),console.log(i),i;function a(t){var e=[];t.children&&(e=t.children.map(function(t){return t.data.name.cleanString()})),console.log(r.default,e);var o=document.createElement("div");o.innerHTML='\n    <div title="not loaded" data-collection="'+t.key+'" class="button button--'+(n?"secondary":"tertiary")+" "+e.reduce(function(t,e){return t+e+" "},"")+'">\n      <span>'+t.data.name+"</span>\n    </div>";var i=o.children[0];return i.onclick=function(){console.log(this),d3.selectAll(".browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),RFFApp.controller.getCollectionItems(t.data.key)},i}},e.createTopicKey=function(){document.getElementById("browse-buttons-container").insertAdjacentHTML("beforeend",'<div id="topic-key">\n                  <div class="issue-brief">= issue brief and literature review available</div>\n                  <div>= issue brief and literature review still to come</div>\n              </div>')}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){(function(e){
/*!
* Tippy.js v2.5.2
* (c) 2017-2018 atomiks
* MIT
*/var n;n=function(){"use strict";var t="undefined"!=typeof window,n=t&&/MSIE |Trident\//.test(navigator.userAgent),o={};t&&(o.supported="requestAnimationFrame"in window,o.supportsTouch="ontouchstart"in window,o.usingTouch=!1,o.dynamicInputDetection=!0,o.iOS=/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,o.onUserInputChange=function(){});var i={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow",REFERENCE:"[data-tippy]"},r={placement:"top",livePlacement:!0,trigger:"mouseenter focus",animation:"shift-away",html:!1,animateFill:!0,arrow:!1,delay:0,duration:[350,300],interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,updateDuration:350,sticky:!1,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,flip:!0,flipBehavior:"flip",arrowType:"sharp",arrowTransform:"",maxWidth:"",target:null,allowTitleHTML:!0,popperOptions:{},createPopperInstanceOnInit:!1,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){}},a=o.supported&&Object.keys(r);function s(t){return"[object Object]"==={}.toString.call(t)}function p(t){return[].slice.call(t)}function l(t){for(var e=["","webkit"],n=t.charAt(0).toUpperCase()+t.slice(1),o=0;o<e.length;o++){var i=e[o],r=i?i+n:t;if(void 0!==document.body.style[r])return r}return null}function c(){return document.createElement("div")}var d=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),f=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t};function m(t){var e=function(e){return t.querySelector(e)};return{tooltip:e(i.TOOLTIP),backdrop:e(i.BACKDROP),content:e(i.CONTENT),arrow:e(i.ARROW)||e(i.ROUND_ARROW)}}function h(t){var e=t.getAttribute("title");e&&t.setAttribute("data-original-title",e),t.removeAttribute("title")}
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */for(var y="undefined"!=typeof window&&"undefined"!=typeof document,v=["Edge","Trident","Firefox"],b=0,g=0;g<v.length;g+=1)if(y&&navigator.userAgent.indexOf(v[g])>=0){b=1;break}var w=y&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},b))}};function x(t){return t&&"[object Function]"==={}.toString.call(t)}function k(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function E(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function T(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=k(t),n=e.overflow,o=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+o)?t:T(E(t))}var O=y&&!(!window.MSInputMethodContext||!document.documentMode),C=y&&/MSIE 10/.test(navigator.userAgent);function S(t){return 11===t?O:10===t?C:O||C}function A(t){if(!t)return document.documentElement;for(var e=S(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var o=n&&n.nodeName;return o&&"BODY"!==o&&"HTML"!==o?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===k(n,"position")?A(n):n:t?t.ownerDocument.documentElement:document.documentElement}function L(t){return null!==t.parentNode?L(t.parentNode):t}function M(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,o=n?t:e,i=n?e:t,r=document.createRange();r.setStart(o,0),r.setEnd(i,0);var a,s,p=r.commonAncestorContainer;if(t!==p&&e!==p||o.contains(i))return"BODY"===(s=(a=p).nodeName)||"HTML"!==s&&A(a.firstElementChild)!==a?A(p):p;var l=L(t);return l.host?M(l.host,e):M(t,L(e).host)}function I(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var o=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||o)[e]}return t[e]}function F(t,e){var n="x"===e?"Left":"Top",o="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+o+"Width"],10)}function P(t,e,n,o){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],S(10)?n["offset"+t]+o["margin"+("Height"===t?"Top":"Left")]+o["margin"+("Height"===t?"Bottom":"Right")]:0)}function R(){var t=document.body,e=document.documentElement,n=S(10)&&getComputedStyle(e);return{height:P("Height",t,e,n),width:P("Width",t,e,n)}}var D=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Y=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),X=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},_=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t};function N(t){return _({},t,{right:t.left+t.width,bottom:t.top+t.height})}function H(t){var e={};try{if(S(10)){e=t.getBoundingClientRect();var n=I(t,"top"),o=I(t,"left");e.top+=n,e.left+=o,e.bottom+=n,e.right+=o}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},r="HTML"===t.nodeName?R():{},a=r.width||t.clientWidth||i.right-i.left,s=r.height||t.clientHeight||i.bottom-i.top,p=t.offsetWidth-a,l=t.offsetHeight-s;if(p||l){var c=k(t);p-=F(c,"x"),l-=F(c,"y"),i.width-=p,i.height-=l}return N(i)}function B(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=S(10),i="HTML"===e.nodeName,r=H(t),a=H(e),s=T(t),p=k(e),l=parseFloat(p.borderTopWidth,10),c=parseFloat(p.borderLeftWidth,10);n&&"HTML"===e.nodeName&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var d=N({top:r.top-a.top-l,left:r.left-a.left-c,width:r.width,height:r.height});if(d.marginTop=0,d.marginLeft=0,!o&&i){var u=parseFloat(p.marginTop,10),f=parseFloat(p.marginLeft,10);d.top-=l-u,d.bottom-=l-u,d.left-=c-f,d.right-=c-f,d.marginTop=u,d.marginLeft=f}return(o&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=I(e,"top"),i=I(e,"left"),r=n?-1:1;return t.top+=o*r,t.bottom+=o*r,t.left+=i*r,t.right+=i*r,t}(d,e)),d}function z(t){if(!t||!t.parentElement||S())return document.documentElement;for(var e=t.parentElement;e&&"none"===k(e,"transform");)e=e.parentElement;return e||document.documentElement}function j(t,e,n,o){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r={top:0,left:0},a=i?z(t):M(t,e);if("viewport"===o)r=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,o=B(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),r=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:I(n),s=e?0:I(n,"left");return N({top:a-o.top+o.marginTop,left:s-o.left+o.marginLeft,width:i,height:r})}(a,i);else{var s=void 0;"scrollParent"===o?"BODY"===(s=T(E(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===o?t.ownerDocument.documentElement:o;var p=B(s,a,i);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===k(e,"position")||t(E(e)))}(a))r=p;else{var l=R(),c=l.height,d=l.width;r.top+=p.top-p.marginTop,r.bottom=c+p.top,r.left+=p.left-p.marginLeft,r.right=d+p.left}}return r.left+=n,r.top+=n,r.right-=n,r.bottom-=n,r}function W(t,e,n,o,i){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=j(n,o,r,i),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},p=Object.keys(s).map(function(t){return _({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),l=p.filter(function(t){var e=t.width,o=t.height;return e>=n.clientWidth&&o>=n.clientHeight}),c=l.length>0?l[0].key:p[0].key,d=t.split("-")[1];return c+(d?"-"+d:"")}function U(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return B(n,o?z(e):M(e,n),o)}function q(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),o=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+o,height:t.offsetHeight+n}}function J(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function V(t,e,n){n=n.split("-")[0];var o=q(t),i={width:o.width,height:o.height},r=-1!==["right","left"].indexOf(n),a=r?"top":"left",s=r?"left":"top",p=r?"height":"width",l=r?"width":"height";return i[a]=e[a]+e[p]/2-o[p]/2,i[s]=n===s?e[s]-o[l]:e[J(s)],i}function G(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function K(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var o=G(t,function(t){return t[e]===n});return t.indexOf(o)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&x(n)&&(e.offsets.popper=N(e.offsets.popper),e.offsets.reference=N(e.offsets.reference),e=n(e,t))}),e}function Z(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function Q(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),o=0;o<e.length;o++){var i=e[o],r=i?""+i+n:t;if(void 0!==document.body.style[r])return r}return null}function $(t){var e=t.ownerDocument;return e?e.defaultView:window}function tt(t,e,n,o){n.updateBound=o,$(t).addEventListener("resize",n.updateBound,{passive:!0});var i=T(t);return function t(e,n,o,i){var r="BODY"===e.nodeName,a=r?e.ownerDocument.defaultView:e;a.addEventListener(n,o,{passive:!0}),r||t(T(a.parentNode),n,o,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function et(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,$(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function nt(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function ot(t,e){Object.keys(e).forEach(function(n){var o="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&nt(e[n])&&(o="px"),t.style[n]=e[n]+o})}function it(t,e,n){var o=G(t,function(t){return t.name===e}),i=!!o&&t.some(function(t){return t.name===n&&t.enabled&&t.order<o.order});if(!i){var r="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return i}var rt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],at=rt.slice(3);function st(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=at.indexOf(t),o=at.slice(n+1).concat(at.slice(0,n));return e?o.reverse():o}var pt={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function lt(t,e,n,o){var i=[0,0],r=-1!==["right","left"].indexOf(o),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(G(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,l=-1!==s?[a.slice(0,s).concat([a[s].split(p)[0]]),[a[s].split(p)[1]].concat(a.slice(s+1))]:[a];return(l=l.map(function(t,o){var i=(1===o?!r:r)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,o){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+i[1],a=i[2];if(!r)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=o}return N(s)[e]/100*r}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r;return r}(t,i,e,n)})})).forEach(function(t,e){t.forEach(function(n,o){nt(n)&&(i[e]+=n*("-"===t[o-1]?-1:1))})}),i}var ct={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],o=e.split("-")[1];if(o){var i=t.offsets,r=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",l=s?"width":"height",c={start:X({},p,r[p]),end:X({},p,r[p]+r[l]-a[l])};t.offsets.popper=_({},a,c[o])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,o=t.placement,i=t.offsets,r=i.popper,a=i.reference,s=o.split("-")[0],p=void 0;return p=nt(+n)?[+n,0]:lt(n,r,a,s),"left"===s?(r.top+=p[0],r.left-=p[1]):"right"===s?(r.top+=p[0],r.left+=p[1]):"top"===s?(r.left+=p[0],r.top-=p[1]):"bottom"===s&&(r.left+=p[0],r.top+=p[1]),t.popper=r,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||A(t.instance.popper);t.instance.reference===n&&(n=A(n));var o=Q("transform"),i=t.instance.popper.style,r=i.top,a=i.left,s=i[o];i.top="",i.left="",i[o]="";var p=j(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=r,i.left=a,i[o]=s,e.boundaries=p;var l=e.priority,c=t.offsets.popper,d={primary:function(t){var n=c[t];return c[t]<p[t]&&!e.escapeWithReference&&(n=Math.max(c[t],p[t])),X({},t,n)},secondary:function(t){var n="right"===t?"left":"top",o=c[n];return c[t]>p[t]&&!e.escapeWithReference&&(o=Math.min(c[n],p[t]-("right"===t?c.width:c.height))),X({},n,o)}};return l.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=_({},c,d[e](t))}),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,o=e.reference,i=t.placement.split("-")[0],r=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",p=a?"left":"top",l=a?"width":"height";return n[s]<r(o[p])&&(t.offsets.popper[p]=r(o[p])-n[l]),n[p]>r(o[s])&&(t.offsets.popper[p]=r(o[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!it(t.instance.modifiers,"arrow","keepTogether"))return t;var o=e.element;if("string"==typeof o){if(!(o=t.instance.popper.querySelector(o)))return t}else if(!t.instance.popper.contains(o))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],r=t.offsets,a=r.popper,s=r.reference,p=-1!==["left","right"].indexOf(i),l=p?"height":"width",c=p?"Top":"Left",d=c.toLowerCase(),u=p?"left":"top",f=p?"bottom":"right",m=q(o)[l];s[f]-m<a[d]&&(t.offsets.popper[d]-=a[d]-(s[f]-m)),s[d]+m>a[f]&&(t.offsets.popper[d]+=s[d]+m-a[f]),t.offsets.popper=N(t.offsets.popper);var h=s[d]+s[l]/2-m/2,y=k(t.instance.popper),v=parseFloat(y["margin"+c],10),b=parseFloat(y["border"+c+"Width"],10),g=h-t.offsets.popper[d]-v-b;return g=Math.max(Math.min(a[l]-m,g),0),t.arrowElement=o,t.offsets.arrow=(X(n={},d,Math.round(g)),X(n,u,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(Z(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=j(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),o=t.placement.split("-")[0],i=J(o),r=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case pt.FLIP:a=[o,i];break;case pt.CLOCKWISE:a=st(o);break;case pt.COUNTERCLOCKWISE:a=st(o,!0);break;default:a=e.behavior}return a.forEach(function(s,p){if(o!==s||a.length===p+1)return t;o=t.placement.split("-")[0],i=J(o);var l=t.offsets.popper,c=t.offsets.reference,d=Math.floor,u="left"===o&&d(l.right)>d(c.left)||"right"===o&&d(l.left)<d(c.right)||"top"===o&&d(l.bottom)>d(c.top)||"bottom"===o&&d(l.top)<d(c.bottom),f=d(l.left)<d(n.left),m=d(l.right)>d(n.right),h=d(l.top)<d(n.top),y=d(l.bottom)>d(n.bottom),v="left"===o&&f||"right"===o&&m||"top"===o&&h||"bottom"===o&&y,b=-1!==["top","bottom"].indexOf(o),g=!!e.flipVariations&&(b&&"start"===r&&f||b&&"end"===r&&m||!b&&"start"===r&&h||!b&&"end"===r&&y);(u||v||g)&&(t.flipped=!0,(u||v)&&(o=a[p+1]),g&&(r=function(t){return"end"===t?"start":"start"===t?"end":t}(r)),t.placement=o+(r?"-"+r:""),t.offsets.popper=_({},t.offsets.popper,V(t.instance.popper,t.offsets.reference,t.placement)),t=K(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],o=t.offsets,i=o.popper,r=o.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=r[n]-(s?i[a?"width":"height"]:0),t.placement=J(e),t.offsets.popper=N(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!it(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=G(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,o=e.y,i=t.offsets.popper,r=G(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==r?r:e.gpuAcceleration,s=H(A(t.instance.popper)),p={position:i.position},l={left:Math.floor(i.left),top:Math.round(i.top),bottom:Math.round(i.bottom),right:Math.floor(i.right)},c="bottom"===n?"top":"bottom",d="right"===o?"left":"right",u=Q("transform"),f=void 0,m=void 0;if(m="bottom"===c?-s.height+l.bottom:l.top,f="right"===d?-s.width+l.right:l.left,a&&u)p[u]="translate3d("+f+"px, "+m+"px, 0)",p[c]=0,p[d]=0,p.willChange="transform";else{var h="bottom"===c?-1:1,y="right"===d?-1:1;p[c]=m*h,p[d]=f*y,p.willChange=c+", "+d}var v={"x-placement":t.placement};return t.attributes=_({},v,t.attributes),t.styles=_({},p,t.styles),t.arrowStyles=_({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return ot(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&ot(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,o,i){var r=U(i,e,t,n.positionFixed),a=W(n.placement,r,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),ot(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},dt=function(){function t(e,n){var o=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};D(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(o.update)},this.update=w(this.update.bind(this)),this.options=_({},t.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(_({},t.Defaults.modifiers,i.modifiers)).forEach(function(e){o.options.modifiers[e]=_({},t.Defaults.modifiers[e]||{},i.modifiers?i.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return _({name:t},o.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&x(t.onLoad)&&t.onLoad(o.reference,o.popper,o.options,t,o.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return Y(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=U(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=W(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=V(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=K(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,Z(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Q("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=tt(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return et.call(this)}}]),t}();function ut(t){return t.getAttribute("x-placement").replace(/-.+/,"")}function ft(t,e,n,o){return e.length?{scale:1===e.length?""+e[0]:n?e[0]+", "+e[1]:e[1]+", "+e[0],translate:1===e.length?o?-e[0]+"px":e[0]+"px":n?o?e[0]+"px, "+-e[1]+"px":e[0]+"px, "+e[1]+"px":o?-e[1]+"px, "+e[0]+"px":e[1]+"px, "+e[0]+"px"}[t]:""}function mt(t,e){if(!t)return"";return e?t:{X:"Y",Y:"X"}[t]}function ht(t,e,n){var o=ut(t),i="top"===o||"bottom"===o,r="right"===o||"bottom"===o,a=function(t){var e=n.match(t);return e?e[1]:""},s=function(t){var e=n.match(t);return e?e[1].split(",").map(parseFloat):[]},p=/translateX?Y?\(([^)]+)\)/,c=/scaleX?Y?\(([^)]+)\)/,d={translate:{axis:a(/translate([XY])/),numbers:s(p)},scale:{axis:a(/scale([XY])/),numbers:s(c)}},u=n.replace(p,"translate"+mt(d.translate.axis,i)+"("+ft("translate",d.translate.numbers,i,r)+")").replace(c,"scale"+mt(d.scale.axis,i)+"("+ft("scale",d.scale.numbers,i,r)+")");e.style[l("transform")]=u}function yt(t){return-(t-r.distance)+"px"}dt.Utils=("undefined"!=typeof window?window:e).PopperUtils,dt.placements=rt,dt.Defaults=ct;var vt={};if(t){var bt=Element.prototype;vt=bt.matches||bt.matchesSelector||bt.webkitMatchesSelector||bt.mozMatchesSelector||bt.msMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),n=e.length;--n>=0&&e.item(n)!==this;);return n>-1}}var gt=vt;function wt(t,e){return(Element.prototype.closest||function(t){for(var e=this;e;){if(gt.call(e,t))return e;e=e.parentElement}}).call(t,e)}function xt(t,e){return Array.isArray(t)?t[e]:t}function kt(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function Et(t,e){t.filter(Boolean).forEach(function(t){t.style[l("transitionDuration")]=e+"ms"})}function Tt(t){var e=window.scrollX||window.pageXOffset,n=window.scrollY||window.pageYOffset;t.focus(),scroll(e,n)}var Ot={},Ct=function(t){return function(e){return e===Ot&&t}},St=function(){function t(e){for(var n in d(this,t),e)this[n]=e[n];this.state={destroyed:!1,visible:!1,enabled:!0},this._=Ct({mutationObservers:[]})}return u(t,[{key:"enable",value:function(){this.state.enabled=!0}},{key:"disable",value:function(){this.state.enabled=!1}},{key:"show",value:function(t){var e=this;if(!this.state.destroyed&&this.state.enabled){var n=this.popper,o=this.reference,i=this.options,r=m(n),a=r.tooltip,s=r.backdrop,p=r.content;i.dynamicTitle&&!o.getAttribute("data-original-title")||o.hasAttribute("disabled")||(o.refObj||document.documentElement.contains(o)?(i.onShow.call(n,this),t=xt(void 0!==t?t:i.duration,0),Et([n,a,s],0),n.style.visibility="visible",this.state.visible=!0,function(t){var e=this.options;this.popperInstance?(this.popperInstance.scheduleUpdate(),e.livePlacement&&!At.call(this)&&this.popperInstance.enableEventListeners()):(this.popperInstance=Ft.call(this),e.livePlacement||this.popperInstance.disableEventListeners());if(!At.call(this)){var n=m(this.popper),o=n.arrow;o&&(o.style.margin=""),this.popperInstance.reference=this.reference}(function(t,e,n){var o=t.popper,i=t.options,r=i.onCreate,a=i.onUpdate;i.onCreate=i.onUpdate=function(){(function(t){t.offsetHeight})(o),e&&e(),a(),i.onCreate=r,i.onUpdate=a},n||t.scheduleUpdate()})(this.popperInstance,t,!0),e.appendTo.contains(this.popper)||e.appendTo.appendChild(this.popper)}.call(this,function(){if(e.state.visible){if(At.call(e)||e.popperInstance.scheduleUpdate(),At.call(e)){e.popperInstance.disableEventListeners();var r=xt(i.delay,0),c=e._(Ot).lastTriggerEvent;c&&e._(Ot).followCursorListener(r&&e._(Ot).lastMouseMoveEvent?e._(Ot).lastMouseMoveEvent:c)}Et([a,s,s?p:null],t),s&&getComputedStyle(s)[l("transform")],i.interactive&&o.classList.add("tippy-active"),i.sticky&&function(){var t=this;!function e(){t.popperInstance&&t.popperInstance.update(),t.popper.style[l("transitionDuration")]=t.options.updateDuration+"ms",t.state.visible?requestAnimationFrame(e):t.popper.style[l("transitionDuration")]=""}()}.call(e),kt([a,s],"visible"),Dt.call(e,t,function(){i.updateDuration||a.classList.add("tippy-notransition"),i.interactive&&Tt(n),o.setAttribute("aria-describedby","tippy-"+e.id),i.onShown.call(n,e)})}})):this.destroy())}}},{key:"hide",value:function(t){var e=this;if(!this.state.destroyed&&this.state.enabled){var n,o=this.popper,i=this.reference,r=this.options,a=m(o),s=a.tooltip,p=a.backdrop,l=a.content;r.onHide.call(o,this),t=xt(void 0!==t?t:r.duration,1),r.updateDuration||s.classList.remove("tippy-notransition"),r.interactive&&i.classList.remove("tippy-active"),o.style.visibility="hidden",this.state.visible=!1,Et([s,p,p?l:null],t),kt([s,p],"hidden"),r.interactive&&r.trigger.indexOf("click")>-1&&Tt(i),this.popperInstance.disableEventListeners(),n=function(){Dt.call(e,t,function(){!e.state.visible&&r.appendTo.contains(o)&&(e._(Ot).isPreparingToShow||(document.removeEventListener("mousemove",e._(Ot).followCursorListener),e._(Ot).lastMouseMoveEvent=null),i.removeAttribute("aria-describedby"),r.appendTo.removeChild(o),r.onHidden.call(o,e))})},requestAnimationFrame(function(){setTimeout(n,1)})}}},{key:"destroy",value:function(){var t=this,e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(!this.state.destroyed){this.state.visible&&this.hide(0),this.listeners.forEach(function(e){t.reference.removeEventListener(e.event,e.handler)}),this.title&&this.reference.setAttribute("title",this.title),delete this.reference._tippy;["data-original-title","data-tippy","data-tippy-delegate"].forEach(function(e){t.reference.removeAttribute(e)}),this.options.target&&e&&p(this.reference.querySelectorAll(this.options.target)).forEach(function(t){return t._tippy&&t._tippy.destroy()}),this.popperInstance&&this.popperInstance.destroy(),this._(Ot).mutationObservers.forEach(function(t){t.disconnect()}),this.state.destroyed=!0}}}]),t}();function At(){var t=this._(Ot).lastTriggerEvent;return this.options.followCursor&&!o.usingTouch&&t&&"focus"!==t.type}function Lt(t){var e=this,n=this.options;if(Pt.call(this),!this.state.visible)if(n.target)(function(t){var e=wt(t.target,this.options.target);if(e&&!e._tippy){var n=e.getAttribute("title")||this.title;n&&(e.setAttribute("title",n),Ht(e,f({},this.options,{target:null})),Lt.call(e._tippy,t))}}).call(this,t);else if(this._(Ot).isPreparingToShow=!0,n.wait)n.wait.call(this.popper,this.show.bind(this),t);else{if(At.call(this)){this._(Ot).followCursorListener||function(){var t=this;this._(Ot).followCursorListener=function(e){var n=t._(Ot).lastMouseMoveEvent=e,o=n.clientX,i=n.clientY;t.popperInstance&&(t.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:i,left:o,right:o,bottom:i}},clientWidth:0,clientHeight:0},t.popperInstance.scheduleUpdate())}}.call(this);var o=m(this.popper).arrow;o&&(o.style.margin="0"),document.addEventListener("mousemove",this._(Ot).followCursorListener)}var i=xt(n.delay,0);i?this._(Ot).showTimeout=setTimeout(function(){e.show()},i):this.show()}}function Mt(){var t=this;if(Pt.call(this),this.state.visible){this._(Ot).isPreparingToShow=!1;var e=xt(this.options.delay,1);e?this._(Ot).hideTimeout=setTimeout(function(){t.state.visible&&t.hide()},e):this.hide()}}function It(){var t=this;return{onTrigger:function(e){if(t.state.enabled){var n=o.supportsTouch&&o.usingTouch&&["mouseenter","mouseover","focus"].indexOf(e.type)>-1;n&&t.options.touchHold||(t._(Ot).lastTriggerEvent=e,"click"===e.type&&"persistent"!==t.options.hideOnClick&&t.state.visible?Mt.call(t):Lt.call(t,e),n&&o.iOS&&t.reference.click&&t.reference.click())}},onMouseLeave:function(e){if(!(["mouseleave","mouseout"].indexOf(e.type)>-1&&o.supportsTouch&&o.usingTouch&&t.options.touchHold)){if(t.options.interactive){var n=Mt.bind(t);return document.body.addEventListener("mouseleave",n),void document.addEventListener("mousemove",function e(o){var r=wt(o.target,i.REFERENCE),a=wt(o.target,i.POPPER)===t.popper,s=r===t.reference;a||s||function(t,e,n){if(!e.getAttribute("x-placement"))return!0;var o=t.clientX,i=t.clientY,r=n.interactiveBorder,a=n.distance,s=e.getBoundingClientRect(),p=ut(e),l=r+a,c={top:s.top-i>r,bottom:i-s.bottom>r,left:s.left-o>r,right:o-s.right>r};switch(p){case"top":c.top=s.top-i>l;break;case"bottom":c.bottom=i-s.bottom>l;break;case"left":c.left=s.left-o>l;break;case"right":c.right=o-s.right>l}return c.top||c.bottom||c.left||c.right}(o,t.popper,t.options)&&(document.body.removeEventListener("mouseleave",n),document.removeEventListener("mousemove",e),Mt.call(t,e))})}Mt.call(t)}},onBlur:function(e){if(e.target===t.reference&&!o.usingTouch){if(t.options.interactive){if(!e.relatedTarget)return;if(wt(e.relatedTarget,i.POPPER))return}Mt.call(t)}},onDelegateShow:function(e){wt(e.target,t.options.target)&&Lt.call(t,e)},onDelegateHide:function(e){wt(e.target,t.options.target)&&Mt.call(t)}}}function Ft(){var t=this,e=this.popper,n=this.reference,o=this.options,r=m(e).tooltip,a=o.popperOptions,s="round"===o.arrowType?i.ROUND_ARROW:i.ARROW,p=r.querySelector(s),l=f({placement:o.placement},a||{},{modifiers:f({},a?a.modifiers:{},{arrow:f({element:s},a&&a.modifiers?a.modifiers.arrow:{}),flip:f({enabled:o.flip,padding:o.distance+5,behavior:o.flipBehavior},a&&a.modifiers?a.modifiers.flip:{}),offset:f({offset:o.offset},a&&a.modifiers?a.modifiers.offset:{})}),onCreate:function(){r.style[ut(e)]=yt(o.distance),p&&o.arrowTransform&&ht(e,p,o.arrowTransform)},onUpdate:function(){var t=r.style;t.top="",t.bottom="",t.left="",t.right="",t[ut(e)]=yt(o.distance),p&&o.arrowTransform&&ht(e,p,o.arrowTransform)}});return Rt.call(this,{target:e,callback:function(){t.popperInstance.update()},options:{childList:!0,subtree:!0,characterData:!0}}),new dt(n,e,l)}function Pt(){var t=this._(Ot),e=t.showTimeout,n=t.hideTimeout;clearTimeout(e),clearTimeout(n)}function Rt(t){var e=t.target,n=t.callback,o=t.options;if(window.MutationObserver){var i=new MutationObserver(n);i.observe(e,o),this._(Ot).mutationObservers.push(i)}}function Dt(t,e){if(!t)return e();var n=m(this.popper).tooltip,o=function(t,e){e&&n[t+"EventListener"]("ontransitionend"in window?"transitionend":"webkitTransitionEnd",e)},i=function t(i){i.target===n&&(o("remove",t),e())};o("remove",this._(Ot).transitionendListener),o("add",i),this._(Ot).transitionendListener=i}var Yt=1;function Xt(t,e){return t.reduce(function(t,i){var r=Yt,s=function(t,e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),"function"==typeof e.html&&(e.html=e.html(t)),e}(i,e.performance?e:function(t,e){var n=a.reduce(function(n,o){var i=t.getAttribute("data-tippy-"+o.toLowerCase())||e[o];return"false"===i&&(i=!1),"true"===i&&(i=!0),isFinite(i)&&!isNaN(parseFloat(i))&&(i=parseFloat(i)),"target"!==o&&"string"==typeof i&&"["===i.trim().charAt(0)&&(i=JSON.parse(i)),n[o]=i,n},{});return f({},e,n)}(i,e)),p=i.getAttribute("title");if(!(p||s.target||s.html||s.dynamicTitle))return t;i.setAttribute(s.target?"data-tippy-delegate":"data-tippy",""),h(i);var d=function(t,e,n){var o=c();o.setAttribute("class","tippy-popper"),o.setAttribute("role","tooltip"),o.setAttribute("id","tippy-"+t),o.style.zIndex=n.zIndex,o.style.maxWidth=n.maxWidth;var i=c();i.setAttribute("class","tippy-tooltip"),i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.setAttribute("data-state","hidden"),n.theme.split(" ").forEach(function(t){i.classList.add(t+"-theme")});var r=c();if(r.setAttribute("class","tippy-content"),n.arrow){var a=c();a.style[l("transform")]=n.arrowTransform,"round"===n.arrowType?(a.classList.add("tippy-roundarrow"),a.innerHTML='<svg viewBox="0 0 24 8" xmlns="http://www.w3.org/2000/svg"><path d="M3 8s2.021-.015 5.253-4.218C9.584 2.051 10.797 1.007 12 1c1.203-.007 2.416 1.035 3.761 2.782C19.012 8.005 21 8 21 8H3z"/></svg>'):a.classList.add("tippy-arrow"),i.appendChild(a)}if(n.animateFill){i.setAttribute("data-animatefill","");var s=c();s.classList.add("tippy-backdrop"),s.setAttribute("data-state","hidden"),i.appendChild(s)}n.inertia&&i.setAttribute("data-inertia",""),n.interactive&&i.setAttribute("data-interactive","");var p=n.html;if(p){var d=void 0;p instanceof Element?(r.appendChild(p),d="#"+(p.id||"tippy-html-template")):(r.innerHTML=document.querySelector(p).innerHTML,d=p),o.setAttribute("data-html",""),i.setAttribute("data-template-id",d),n.interactive&&o.setAttribute("tabindex","-1")}else r[n.allowTitleHTML?"innerHTML":"textContent"]=e;return i.appendChild(r),o.appendChild(i),o}(r,p,s),u=new St({id:r,reference:i,popper:d,options:s,title:p,popperInstance:null});s.createPopperInstanceOnInit&&(u.popperInstance=Ft.call(u),u.popperInstance.disableEventListeners());var y=It.call(u);return u.listeners=s.trigger.trim().split(" ").reduce(function(t,e){return t.concat(function(t,e,i,r){var a=i.onTrigger,s=i.onMouseLeave,p=i.onBlur,l=i.onDelegateShow,c=i.onDelegateHide,d=[];if("manual"===t)return d;var u=function(t,n){e.addEventListener(t,n),d.push({event:t,handler:n})};return r.target?(o.supportsTouch&&r.touchHold&&(u("touchstart",l),u("touchend",c)),"mouseenter"===t&&(u("mouseover",l),u("mouseout",c)),"focus"===t&&(u("focusin",l),u("focusout",c)),"click"===t&&u("click",l)):(u(t,a),o.supportsTouch&&r.touchHold&&(u("touchstart",a),u("touchend",s)),"mouseenter"===t&&u("mouseleave",s),"focus"===t&&u(n?"focusout":"blur",p)),d}(e,i,y,s))},[]),s.dynamicTitle&&Rt.call(u,{target:i,callback:function(){var t=m(d).content,e=i.getAttribute("title");e&&(t[s.allowTitleHTML?"innerHTML":"textContent"]=u.title=e,h(i))},options:{attributes:!0}}),i._tippy=u,d._tippy=u,d._reference=i,t.push(u),Yt++,t},[])}function _t(t){p(document.querySelectorAll(i.POPPER)).forEach(function(e){var n=e._tippy;if(n){var o=n.options;!(!0===o.hideOnClick||o.trigger.indexOf("focus")>-1)||t&&e===t.popper||n.hide()}})}var Nt=!1;function Ht(t,e,n){var a,l,c,d;o.supported&&!Nt&&(l=function(){o.usingTouch||(o.usingTouch=!0,o.iOS&&document.body.classList.add("tippy-touch"),o.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",c),o.onUserInputChange("touch"))},a=void 0,c=function(){var t=performance.now();t-a<20&&(o.usingTouch=!1,document.removeEventListener("mousemove",c),o.iOS||document.body.classList.remove("tippy-touch"),o.onUserInputChange("mouse")),a=t},document.addEventListener("click",function(t){if(!(t.target instanceof Element))return _t();var e=wt(t.target,i.REFERENCE),n=wt(t.target,i.POPPER);if(!(n&&n._tippy&&n._tippy.options.interactive)){if(e&&e._tippy){var r=e._tippy.options,a=r.trigger.indexOf("click")>-1,s=r.multiple;if(!s&&o.usingTouch||!s&&a)return _t(e._tippy);if(!0!==r.hideOnClick||a)return}_t()}}),document.addEventListener("touchstart",l),window.addEventListener("blur",function(){var t=document.activeElement;t&&t.blur&&gt.call(t,i.REFERENCE)&&t.blur()}),window.addEventListener("resize",function(){p(document.querySelectorAll(i.POPPER)).forEach(function(t){var e=t._tippy;e&&!e.options.livePlacement&&e.popperInstance.scheduleUpdate()})}),o.supportsTouch||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints||document.addEventListener("pointerdown",l),Nt=!0),s(t)&&((d=t).refObj=!0,d.attributes=d.attributes||{},d.setAttribute=function(t,e){d.attributes[t]=e},d.getAttribute=function(t){return d.attributes[t]},d.removeAttribute=function(t){delete d.attributes[t]},d.hasAttribute=function(t){return t in d.attributes},d.addEventListener=function(){},d.removeEventListener=function(){},d.classList={classNames:{},add:function(t){return d.classList.classNames[t]=!0},remove:function(t){return delete d.classList.classNames[t],!0},contains:function(t){return t in d.classList.classNames}}),e=f({},r,e);var u=function(t){if(t instanceof Element||s(t))return[t];if(t instanceof NodeList)return p(t);if(Array.isArray(t))return t;try{return p(document.querySelectorAll(t))}catch(t){return[]}}(t),m=u[0];return{selector:t,options:e,tooltips:o.supported?Xt(n&&m?[m]:u,e):[],destroyAll:function(){this.tooltips.forEach(function(t){return t.destroy()}),this.tooltips=[]}}}return Ht.version="2.5.2",Ht.browser=o,Ht.defaults=r,Ht.one=function(t,e){return Ht(t,e,!0).tooltips[0]},Ht.disableAnimations=function(){r.updateDuration=r.duration=0,r.animateFill=!1},function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t&&o.supported){var n=document.head||document.querySelector("head"),i=document.createElement("style");i.type="text/css",n.insertBefore(i,n.firstChild),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}('.tippy-touch{cursor:pointer!important}.tippy-notransition{transition:none!important}.tippy-popper{max-width:350px;-webkit-perspective:700px;perspective:700px;z-index:9999;outline:0;transition-timing-function:cubic-bezier(.165,.84,.44,1);pointer-events:none;line-height:1.4}.tippy-popper[data-html]{max-width:96%;max-width:calc(100% - 20px)}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-8px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;bottom:-7px;margin:0 6px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 90%;transform-origin:0 90%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(-50%,25%);transform:scale(6) translate(-50%,25%);opacity:1}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1) translate(-50%,25%);transform:scale(1) translate(-50%,25%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px) rotateX(0);transform:translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) rotateX(90deg);transform:translateY(0) rotateX(90deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) scale(0);transform:translateY(0) scale(0)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-8px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;top:-7px;margin:0 6px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -90%;transform-origin:0 -90%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(-50%,-125%);transform:scale(6) translate(-50%,-125%);opacity:1}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1) translate(-50%,-125%);transform:scale(1) translate(-50%,-125%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateY(10px) rotateX(0);transform:translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) rotateX(-90deg);transform:translateY(0) rotateX(-90deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) scale(0);transform:translateY(0) scale(0)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-16px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:100% 0;transform-origin:100% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(40%,-50%);transform:scale(6) translate(40%,-50%);opacity:1}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1.5) translate(40%,-50%);transform:scale(1.5) translate(40%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px) rotateY(0);transform:translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) rotateY(-90deg);transform:translateX(0) rotateY(-90deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) scale(0);transform:translateX(0) scale(0)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-16px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-100% 0;transform-origin:-100% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(6) translate(-140%,-50%);transform:scale(6) translate(-140%,-50%);opacity:1}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1.5) translate(-140%,-50%);transform:scale(1.5) translate(-140%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateX(10px) rotateY(0);transform:translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) rotateY(90deg);transform:translateX(0) rotateY(90deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) scale(0);transform:translateX(0) scale(0)}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:.9rem;padding:.3rem .6rem;text-align:center;will-change:transform;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;background-color:#333}.tippy-tooltip[data-size=small]{padding:.2rem .4rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.4rem .8rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-animatefill] .tippy-content{transition:-webkit-clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98),-webkit-clip-path cubic-bezier(.46,.1,.52,.98)}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.53,2,.36,.85)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:24px;height:8px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:26%;left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(100% 100% at 50% 50%);clip-path:ellipse(100% 100% at 50% 50%)}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(5% 50% at 50% 50%);clip-path:ellipse(5% 50% at 50% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 0 50%);clip-path:ellipse(135% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(40% 100% at 0 50%);clip-path:ellipse(40% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 100% 50%);clip-path:ellipse(135% 100% at 100% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(40% 100% at 100% 50%);clip-path:ellipse(40% 100% at 100% 50%)}@media (max-width:360px){.tippy-popper{max-width:96%;max-width:calc(100% - 20px)}}'),Ht},t.exports=n()}).call(this,n(7))},function(t,e){t.exports=[{topic:"Air quality",key:"FUGV49UB",title:"Explore how oil and gas development can affect local and regional air quality"},{topic:"Climate change",key:"CMPFGPRK",title:"Examine the implications of increased oil and gas development for climate change"},{topic:"Community impacts",key:"V538Y7T9",title:"undefined"},{topic:"Community-industry interaction",key:"F8Q5D6RS",title:"Understand how communities and oil and gas companies interact on a variety of issues"},{topic:"Cumulative impacts",key:"missing1",title:"Explore studies that aggregate multiple effects of oil and gas development"},{topic:"Economics of shale development",key:"42H54TQS",title:"Examine the costs, innovations, and trends that shape the economics of shale development"},{topic:"Ecosystems, habitats, species",key:"M43C6MTF",title:"Understand how oil and gas development can affect local and regional ecosystems, habitats, and species"},{topic:"Environmental justice",key:"X5ZEDSMQ",title:"Does oil and gas development have a disproportionate impact on low-income or minority communities?"},{topic:"Federal regulation",key:"SFLUS5I4",title:"How does the federal government regulate the oil and gas industry?"},{topic:"Groundwater",key:"Q7MVJ2ED",title:"Understand the potential impacts of oil and gas development on groundwater resources"},{topic:"Human health",key:"5W2ZJTJC",title:"Explore the potential impacts of oil and gas development on human health"},{topic:"Local governments",key:"EXLS3NV4",title:"Understand how oil and gas development affects local governments"},{topic:"National (US)/sectoral economy",key:"4NPI3GYM",title:"Examine the economic impacts of oil and gas development for the U.S. and major economic sectors"},{topic:"Occupational hazards",key:"missing2",title:"What are the risks of working in oil and gas production?"},{topic:"Property values",key:"NXSYV4IM",title:"How does oil and gas development affect nearby property values?"},{topic:"Public opinion",key:"YJDYU9VM",title:"How does the public view the effects of oil and gas development?"},{topic:"Quality of life/Community impacts",key:"XN7GXNFQ",title:"Examine community impacts such as housing affordability, crime, education, truck traffic, noise, and more"},{topic:"Seismicity",key:"FWMYGUWI",title:"Explore the connection between oil and gas development and earthquakes"},{topic:"State government",key:"APRI3VMZ",title:"Understand how state governments are affected by, and how they affect, oil and gas development"},{topic:"State regulation",key:"9IL3TCKF",title:"How do state governments regulate the oil and gas industry?"},{topic:"Subnational economies",key:"X9DSTIGE",title:"Examine how oil and gas development affects local, state, and regional economies"},{topic:"Surface water",key:"QCW37PP2",title:"Examine the impacts of oil and gas development on the quantity and quality of surface water resources"}]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ /]/g,"-").replace(/['"”’“‘,.!?;()&]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},void(String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."}))},,function(t,e,n){},function(t,e,n){"use strict";n(12),n(10);var o,i,r,a,s=u(n(9)),p=u(n(8)),l=n(6),c=n(3),d=u(n(0));function u(t){return t&&t.__esModule?t:{default:t}}function f(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}o="2127948",i={gateCheck:0,searchType:"fields",init:function(t){window.RFFApp.model.topicButtonPromise=new Promise(function(t){window.RFFApp.model.resolveTopicButtons=t}),this.getZoteroCollections(t),this.getZoteroItems(t),this.setupSearch(),console.log(s.default)},setupSearch:function(){document.getElementById("collection-search").onsubmit=function(t){t.preventDefault(),a.loading(!0);var e=this.querySelector("input").value,n="https://api.zotero.org/groups/"+o+"/items?q="+e+"&format=keys";new Promise(function(t,e){d3.text(n,function(n,o){if(n)throw e(n),n;t(o.split(/\n/))})}).then(function(t){console.log(t),""!==t[0]&&(i.getSearchItems(t),a.loading(!1))})}},getSearchItems:function(t){var e=r.zoteroItems.filter(function(e){return-1!==t.indexOf(e.key)});console.log(e),c.filterResults.call(a,e,i)},childrenify:function(t){return console.log(t),t.forEach(function(e){if(!1!==e.data.parentCollection&&e.meta.numItems>0){var n=t.find(function(t){return t.key===e.data.parentCollection});void 0!==n&&(n.children=n.children||[],n.children.push(e))}}),t},returnKeyValues:function(t,e){return t.slice(1).map(function(n){return n.reduce(function(n,o,i){return n[t[0][i]]=!0===e?isNaN(+o)||""===o?o:+o:o,n},{})})},nestPrelim:function(t){return t.reduce(function(t,e){if("string"!=typeof e&&"function"!=typeof e)throw"each nestBy item must be a string or function";var n;return"string"==typeof e&&(n=t.key(function(t){return t[e]})),"function"==typeof e&&(n=t.key(function(t){return e(t)})),n},d3.nest())},recursiveNest:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"series";if("string"==typeof e||"function"==typeof e)this.nestByArray=[e];else{if(!Array.isArray(e))throw"nestBy variable must be a string, function, or array of strings or functions";this.nestByArray=e}var o=this.nestPrelim(this.nestByArray);return"object"===n?o.object(t):o.entries(t)},getZoteroCollections:function(t){var e=this;t?d3.json("data/zoteroCollections-7-25-18.json",function(t,n){if(t)throw t;r.collections=e.childrenify(n),console.log("increment gateCheck from get collections"),e.gateCheck++,a.init()}):new Promise(function(t,n){var i=0;(function e(){var a=this;d3.json("https://api.zotero.org/groups/"+o+"/collections?limit=100",function(o,s){if(console.log(s),o){if(!(i<3))throw n(o),o;console.log("Error, attempt "+i+": ",o),i++,e()}else console.log(JSON.stringify(s)),r.collections=a.childrenify(s),t(r.collections)})}).call(e)}).then(function(t){console.log(t),console.log("increment gateCheck from get collections"),e.gateCheck++,a.init()})},getZoteroItems:function(t){var e=this;if(t)d3.json("data/zoteroItems-7-25-18.json",function(t,n){if(t)throw t;r.zoteroItems=n,e.parseZoteroItemDates(),console.log("increment gateCheck from get items"),e.gateCheck++,a.init()});else{for(var n=[],i=[],s=0;s<9;s++)setTimeout(n.push(p(s)),500*s);Promise.race(n).then(function(t){if(console.log(t),t.total>9){for(var o=9;o<Math.ceil(t.total/100);o++)i.push(p(o));Promise.all([].concat(n,i)).then(function(t){window.dateStrings=[],t.forEach(function(t){var e;(e=r.zoteroItems).push.apply(e,f(t.data))}),console.log(JSON.stringify(r.zoteroItems)),e.parseZoteroItemDates(),e.gateCheck++,a.init()})}else Promise.all(n).then(function(t){console.log(t),t.forEach(function(t){var e;(e=r.zoteroItems).push.apply(e,f(t.data))}),e.parseZoteroItemDates(),e.gateCeck++,a.init()})})}function p(t){return new Promise(function(e,n){var i=0;!function r(){d3.request("https://api.zotero.org/groups/"+o+"/items/top?include=data,bib&limit=100&start="+100*t,function(t,o){if(t){if(!(i<3))throw n(t),t;console.log("Error, attempt "+i+": ",t),i++,r()}else console.log(+o.getResponseHeader("last-modified-version")),e({total:+o.getResponseHeader("Total-Results"),data:JSON.parse(o.responseText)})})}()})}},parseZoteroItemDates:function(){var t=this;r.zoteroItems.forEach(function(e){var n=t.getDatesFromString(e.data.date);e.data.dateString=n.display,e.data.dateValue=n.value}),r.zoteroItems.sort(function(t,e){return d3.descending(t.data.dateValue,e.data.dateValue)})},getCollectionItems:function(t){console.log(t);var e=r.collections.find(function(e){return e.key===t});console.log(e);var n=r.zoteroItems.filter(function(e){return-1!==e.data.collections.indexOf(t)});console.log(n);var o=[];e.children&&e.children.forEach(function(t){var e=r.zoteroItems.filter(function(e){return-1!==e.data.collections.indexOf(t.key)});e.forEach(function(e){e.synthesisType=t.data.name}),o.push.apply(o,f(e))}),c.createResultsContainer.call(a),c.filterResults.call(a,n,i),a.filterSynthesisResults(o),a.updatePieChart(n)},getDatesFromString:function(t){var e=new Date(1776,3,4),n="",o={forthcoming:/forthcoming/,yyyy:/^(\d{4})$/,yyyymmdd:/(\d{4})[-/](\d{1,2})[-/](\d{1,2})/,monthddyyyy:/^(\w+)\.* *(\d{1,2}), *(\d{4})/,monthyyyy:/^(\w+)\.* (\d{4})/,yyyymm:/^(\d{4})[-/](\d{1,2})$/,mmddyyyy:/^(\d{1,2})[-/](\d{1,2})[-/](\d{4})/,yyyyyyyy:/^(\d{4})[-–—]\d{4}/,yyyymonthdd:/^(\d{4}) *(\w+)\.* *(\d{1,2})/};function i(t){return void 0!==r[t]&&isNaN(r[t])?r[t]:t}var r={0:"January",1:"February",2:"March",3:"April",4:"May",5:"June",6:"July",7:"August",8:"September",9:"October",10:"November",11:"December",January:0,February:1,March:2,April:3,May:4,June:5,July:6,August:7,September:8,October:9,November:10,December:11,Winter:11,Spring:2,Summer:5,Fall:8,Autumn:8,Jan:"January",Feb:"February",Mar:"March",Apr:"April",Jun:"June",Jul:"July",Aug:"August",Sep:"September",Sept:"September",Oct:"October",Nov:"Novemeber",Dec:"December"};for(var a in o)if(o.hasOwnProperty(a)&&void 0!==t){var s=t.match(o[a]);if(null!==s)switch(a){case"yyyy":n=t,e=new Date(+s[1],0,1);break;case"yyyymmdd":n=r[(+s[2]-1).toString()]+" "+ +s[3]+", "+s[1],e=new Date(+s[1],+s[2]-1,+s[3]);break;case"monthddyyyy":n=i(s[1])+" "+ +s[2]+", "+s[3],e=new Date(+s[3],r[i(s[1])],+s[2]);break;case"monthyyyy":n=i(s[1])+" "+s[2],e=new Date(+s[2],r[i(s[1])],1);break;case"yyyymm":n=r[+s[2]-1]+" "+s[1],e=new Date(+s[1],+s[2]-1,1);break;case"mmddyyyy":n=r[+s[1]-1]+" "+ +s[2]+", "+s[3],e=new Date(+s[3],+s[1]-1,+s[2]);break;case"yyyyyyyy":n=t.replace("-","—").replace("-","–"),e=new Date(+s[1],0,1);break;case"yyyymonthdd":n=i(s[2])+" "+ +s[3]+", "+s[1],e=new Date(+s[1],r[i(s[2])],+s[3]);break;case"forthcoming":n="forthcoming",e=new Date}}return{value:e,display:n}},biblioTooltips:function(){(0,p.default)(".tippy-clipboard",{arrow:!0,theme:"RFF",trigger:"manual"}),(0,p.default)(".copy-bib",{arrow:!0,hideOnClick:!1,interactive:!0,theme:"RFF"})},copyBibText:function(){var t=this;this.parentNode.querySelector(".bib-container").select();try{var e=document.execCommand("copy"),n=e?"successful":"unsuccessful";console.log("Copying text command was "+n),e&&(this.parentNode._tippy.show(),setTimeout(function(){t.parentNode._tippy.hide()},1e3))}catch(t){console.log("Oops, unable to copy")}}},r={zoteroItems:[]},a={init:function(){if(d.default.polyfill(),console.log(i.gateCheck),!(i.gateCheck<2)){console.log("READY!"),console.log(r.zoteroItems),this.renderTopicButtons(),this.attachTooltips(),console.log(r.collections);var t=document.querySelector(".browse-buttons div").dataset.collection;i.getCollectionItems(t),c.filterResults.call(a,void 0,i),a.filterSynthesisResults.call(a,[]),this.setupSidebar(),this.loading(!1)}},smoothScroll:function(t){t.scrollIntoView({behavior:"smooth"})},attachTooltips:function(){document.querySelectorAll(".browse-buttons > div").forEach(function(t){var e=s.default.find(function(e){return e.key===t.dataset.collection});void 0!==e&&(t.setAttribute("title",e.title),p.default.one(t,{theme:"RFF",arrow:!0}))})},setupSidebar:function(){var t=d3.max(r.zoteroItems,function(t){return new Date(t.data.dateModified)}),e=d3.max(r.zoteroItems,function(t){return t.data.version});document.querySelector("#sidebar").innerHTML="\n            <h2>Library info</h2>\n            <p>Date last modified: "+t.getDate()+" "+{0:"January",1:"February",2:"March",3:"April",4:"May",5:"June",6:"July",7:"August",8:"September",9:"October",10:"November",11:"December"}[t.getMonth()]+" "+t.getFullYear()+"<br />(Version "+e+")</p>\n            ",this.makePieChart(),this.sibebarDocumentation(),this.sidebarContact()},sibebarDocumentation:function(){var t=document.createElement("div");t.className="documentation",t.innerHTML='\n            <h3>Documentation</h3>\n            <p><a href="#">SHARC Frequently Asked Questions</a> (PDF)</p>\n            <p><a href="#">How SHARC Is Built</a> (PDF)</p>\n            ',document.querySelector("#sidebar").append(t)},sidebarContact:function(){var t=document.createElement("div");t.className="contact-us",t.innerHTML='\n            <h3>Get in touch</h3>\n              <form>\x3c!--<form method="POST" action="http://formspree.io/XXXXXXX" _lpchecked="1">--\x3e\n              <input type="email" name="email" placeholder="Your email">\n              <textarea name="message" placeholder="Your message"></textarea>\n                <input type="text" name="_gotcha" style="display:none">\n                <input type="hidden" name="_next" value="/projects/?thanks">\n              <button type="submit">Send</button>\n            </form>\n          ',document.querySelector("#sidebar").append(t)},makePieChart:function(){var t=d3.select("#sidebar").append("svg").attr("width","100%").attr("xmlns","http://www.w3.org/2000/svg").attr("version","1.1").attr("viewBox","0 0 100 62").attr("focusable",!1).attr("aria-labelledby","svgTitle svgDesc").attr("role","graphics-dataunit").attr("class","pubtype-pie");t.append("title").attr("id","svgTitle").text("Pie chart of publication types"),t.append("desc").attr("id","svgDesc").text("Pie chart of publication types"),t.append("g"),d3.select("#sidebar svg").append("g").attr("class","legend"),d3.select("#sidebar svg").append("text").attr("class","total").attr("font-size",10).attr("text-anchor","middle"),this.updatePieChart(r.zoteroItems)},updatePieChart:function(t){console.log(t);var e=d3.nest().key(function(t){return t.data.itemType}).rollup(function(t){return t.length}).entries(t.filter(function(t){return"attachment"!==t.data.itemType})).sort(function(t,e){return d3.descending(t.value,e.value)}),n=e.reduce(function(t,e){return t+e.value},0),o=[];e.forEach(function(t,n){if(n<4)o.push({name:t.key,value:t.value});else if(4===n){var i=e.slice(n).reduce(function(t,e){return t+e.value},0);o.push({name:"other",value:i})}}),console.log(o);var i=d3.pie().sort(null).value(function(t){return t.value});console.log(i(o));var r=d3.arc().outerRadius(30).innerRadius(20),a=d3.arc().outerRadius(25.5).innerRadius(25.5),s=d3.select("#sidebar svg g").attr("transform","translate(30,30)").selectAll(".arc").data(i(o),function(t){return t.data.name});s.select("path").attr("d",r),s.select("text").attr("transform",function(t){return"translate("+a.centroid(t)+")"}).text(function(t){return t.data.value}),s.exit().remove();var p=s.enter().append("g").attr("class",function(t){return console.log(t),"arc "+t.data.name});p.append("path").attr("d",r),p.append("text").attr("transform",function(t){return"translate("+a.centroid(t)+")"}).attr("dy","0.35em").attr("text-anchor","middle").attr("font-size",4).attr("fill",function(t){return"journalArticle"===t.data.name||"book"===t.data.name||"report"===t.data.name?"#ffffff":"#000000"}).text(function(t){return t.data.value});var l={journalArticle:"journal articles",report:"reports",webpage:"webpages",book:"books",other:"other",bookSection:"chapters",document:"documents",magazineArticle:"magazine articles"},c=d3.select("#sidebar svg g.legend").attr("transform","translate(65,2)").selectAll(".legend-item").data(i(o),function(t){return t.data.name});c.select("g.legend-item").attr("transform",function(t,e){return"translate(0,"+7*e+")"}),c.exit().remove();var d=c.enter().append("g").attr("class",function(t){return"legend-item "+t.data.name}).attr("transform",function(t,e){return"translate(0,"+7*e+")"});d.append("rect").attr("width",5).attr("height",5),d.append("text").attr("transform","translate(7,4)").attr("font-size",4).text(function(t){return l[t.data.name]}),d3.select("#sidebar svg text.total").attr("transform","translate(30,30)").text(n)},loading:function(t){t?document.querySelector("body").classList.add("loading"):document.querySelector("body").classList.remove("loading")},renderTopicButtons:function(){var t=document.getElementById("browse-buttons-container"),e=r.collections.filter(function(t){return!1===t.data.parentCollection}).sort(function(t,e){return d3.ascending(t.data.name,e.data.name)});console.log(e),e.filter(function(t){return void 0!==t.children}).forEach(function(e,n){t.appendChild((0,l.createBrowseCategory)(e,n,!0))}),e.filter(function(t){return void 0===t.children}).forEach(function(e,n){t.appendChild((0,l.createBrowseCategory)(e,n,!1))}),window.RFFApp.model.resolveTopicButtons(!0),this.renderShowAllButton()},renderShowAllButton:function(){d3.select(".browse-buttons.uncategorized").append("div").classed("button button--tertiary show-all active",!0).on("click",function(){d3.selectAll(".browse-buttons .button").classed("active",!1),d3.select(this).classed("active",!0),c.filterResults.call(a,void 0,i),a.filterSynthesisResults.call(a,[])}).append("span").text("Show all"),(0,l.createTopicKey)()},filterSynthesisResults:function(t){console.log(t);var e=d3.select(".synthesis-results ul").selectAll(".list-item").data(t,function(t){return t.data.key});console.log(e),e.exit().classed("entered",!1).classed("exiting",!0).transition(1500).remove();var n=e.enter().append("li").attr("id",function(t){return t.key}).attr("class",function(t,e){return(t.synthesisType.cleanString()||t.data.itemType)+" index-"+e+("RFF"===t.data.institution||"Resources for the Future"===t.data.institution?" RFF":"")}).classed("RFF",!0).classed("entering",!0).classed("list-item",!0).html(function(t){return(0,c.createResultItem)(t)}).on("click",function(){window.open("./pdf/"+this.id+".pdf","_blank")});setTimeout(function(){n.classed("entering",!1)}),this.synthesisItems=n.merge(e)}},window.RFFApp={controller:i,model:r},i.init(!0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,